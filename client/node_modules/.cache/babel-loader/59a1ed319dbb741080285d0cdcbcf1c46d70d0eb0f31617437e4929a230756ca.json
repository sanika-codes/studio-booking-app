{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.androidenterprise_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar androidenterprise_v1;\n(function (androidenterprise_v1) {\n  /**\n   * Google Play EMM API\n   *\n   * Manages the deployment of apps to Android Enterprise devices.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const androidenterprise = google.androidenterprise('v1');\n   * ```\n   */\n  class Androidenterprise {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.devices = new Resource$Devices(this.context);\n      this.enterprises = new Resource$Enterprises(this.context);\n      this.entitlements = new Resource$Entitlements(this.context);\n      this.grouplicenses = new Resource$Grouplicenses(this.context);\n      this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n      this.installs = new Resource$Installs(this.context);\n      this.managedconfigurationsfordevice = new Resource$Managedconfigurationsfordevice(this.context);\n      this.managedconfigurationsforuser = new Resource$Managedconfigurationsforuser(this.context);\n      this.managedconfigurationssettings = new Resource$Managedconfigurationssettings(this.context);\n      this.permissions = new Resource$Permissions(this.context);\n      this.products = new Resource$Products(this.context);\n      this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n      this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n      this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n      this.users = new Resource$Users(this.context);\n      this.webapps = new Resource$Webapps(this.context);\n    }\n  }\n  androidenterprise_v1.Androidenterprise = Androidenterprise;\n  class Resource$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n    forceReportUpload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/forceReportUpload').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Devices = Resource$Devices;\n  class Resource$Enterprises {\n    constructor(context) {\n      this.context = context;\n    }\n    acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/acknowledgeNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    createEnrollmentToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/createEnrollmentToken').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    enroll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/enroll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['token'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['domain'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/pullNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/account').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unenroll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n  class Resource$Entitlements {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n        pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n        pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n        pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n  class Resource$Grouplicenses {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'groupLicenseId'],\n        pathParams: ['enterpriseId', 'groupLicenseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n  class Resource$Grouplicenseusers {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'groupLicenseId'],\n        pathParams: ['enterpriseId', 'groupLicenseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n  class Resource$Installs {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n        pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n        pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n        pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Installs = Resource$Installs;\n  class Resource$Managedconfigurationsfordevice {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n  class Resource$Managedconfigurationsforuser {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n        pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n        pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n        pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n  class Resource$Managedconfigurationssettings {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n  class Resource$Permissions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['permissionId'],\n        pathParams: ['permissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n  class Resource$Products {\n    constructor(context) {\n      this.context = context;\n    }\n    approve(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unapprove(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Products = Resource$Products;\n  class Resource$Serviceaccountkeys {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'keyId'],\n        pathParams: ['enterpriseId', 'keyId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n  class Resource$Storelayoutclusters {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n        pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n        pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n        pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n  class Resource$Storelayoutpages {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'email'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Users = Resource$Users;\n  class Resource$Webapps {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'webAppId'],\n        pathParams: ['enterpriseId', 'webAppId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'webAppId'],\n        pathParams: ['enterpriseId', 'webAppId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'webAppId'],\n        pathParams: ['enterpriseId', 'webAppId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 || (exports.androidenterprise_v1 = androidenterprise_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","androidenterprise_v1","googleapis_common_1","require","Androidenterprise","constructor","options","google","context","_options","devices","Resource$Devices","enterprises","Resource$Enterprises","entitlements","Resource$Entitlements","grouplicenses","Resource$Grouplicenses","grouplicenseusers","Resource$Grouplicenseusers","installs","Resource$Installs","managedconfigurationsfordevice","Resource$Managedconfigurationsfordevice","managedconfigurationsforuser","Resource$Managedconfigurationsforuser","managedconfigurationssettings","Resource$Managedconfigurationssettings","permissions","Resource$Permissions","products","Resource$Products","serviceaccountkeys","Resource$Serviceaccountkeys","storelayoutclusters","Resource$Storelayoutclusters","storelayoutpages","Resource$Storelayoutpages","users","Resource$Users","webapps","Resource$Webapps","forceReportUpload","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","getState","list","setState","update","acknowledgeNotificationSet","completeSignup","createEnrollmentToken","createWebToken","enroll","generateSignupUrl","getServiceAccount","getStoreLayout","pullNotificationSet","sendTestPushNotification","setAccount","setStoreLayout","unenroll","delete","approve","generateApprovalUrl","getAppRestrictionsSchema","getPermissions","unapprove","insert","generateAuthenticationToken","getAvailableProductSet","revokeDeviceAccess","setAvailableProductSet"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/androidenterprise/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.androidenterprise_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar androidenterprise_v1;\n(function (androidenterprise_v1) {\n    /**\n     * Google Play EMM API\n     *\n     * Manages the deployment of apps to Android Enterprise devices.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const androidenterprise = google.androidenterprise('v1');\n     * ```\n     */\n    class Androidenterprise {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.devices = new Resource$Devices(this.context);\n            this.enterprises = new Resource$Enterprises(this.context);\n            this.entitlements = new Resource$Entitlements(this.context);\n            this.grouplicenses = new Resource$Grouplicenses(this.context);\n            this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n            this.installs = new Resource$Installs(this.context);\n            this.managedconfigurationsfordevice =\n                new Resource$Managedconfigurationsfordevice(this.context);\n            this.managedconfigurationsforuser =\n                new Resource$Managedconfigurationsforuser(this.context);\n            this.managedconfigurationssettings =\n                new Resource$Managedconfigurationssettings(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.products = new Resource$Products(this.context);\n            this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n            this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n            this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n            this.users = new Resource$Users(this.context);\n            this.webapps = new Resource$Webapps(this.context);\n        }\n    }\n    androidenterprise_v1.Androidenterprise = Androidenterprise;\n    class Resource$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        forceReportUpload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/forceReportUpload').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Devices = Resource$Devices;\n    class Resource$Enterprises {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/acknowledgeNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createEnrollmentToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/createEnrollmentToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        enroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/enroll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['token'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['domain'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/pullNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/account').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unenroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n    class Resource$Entitlements {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n    class Resource$Grouplicenses {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n    class Resource$Grouplicenseusers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n    class Resource$Installs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Installs = Resource$Installs;\n    class Resource$Managedconfigurationsfordevice {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'deviceId',\n                    'managedConfigurationForDeviceId',\n                ],\n                pathParams: [\n                    'deviceId',\n                    'enterpriseId',\n                    'managedConfigurationForDeviceId',\n                    'userId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'deviceId',\n                    'managedConfigurationForDeviceId',\n                ],\n                pathParams: [\n                    'deviceId',\n                    'enterpriseId',\n                    'managedConfigurationForDeviceId',\n                    'userId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'deviceId',\n                    'managedConfigurationForDeviceId',\n                ],\n                pathParams: [\n                    'deviceId',\n                    'enterpriseId',\n                    'managedConfigurationForDeviceId',\n                    'userId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n    class Resource$Managedconfigurationsforuser {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'managedConfigurationForUserId',\n                ],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'managedConfigurationForUserId',\n                ],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId',\n                    'userId',\n                    'managedConfigurationForUserId',\n                ],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n    class Resource$Managedconfigurationssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['permissionId'],\n                pathParams: ['permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n    class Resource$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        approve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unapprove(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Products = Resource$Products;\n    class Resource$Serviceaccountkeys {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'keyId'],\n                pathParams: ['enterpriseId', 'keyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n    class Resource$Storelayoutclusters {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n    class Resource$Storelayoutpages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'email'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Users = Resource$Users;\n    class Resource$Webapps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidenterprise.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 || (exports.androidenterprise_v1 = androidenterprise_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}