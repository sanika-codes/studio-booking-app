{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drive_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar drive_v3;\n(function (drive_v3) {\n  /**\n   * Google Drive API\n   *\n   * The Google Drive API allows clients to access resources from Google Drive.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const drive = google.drive('v3');\n   * ```\n   */\n  class Drive {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.about = new Resource$About(this.context);\n      this.changes = new Resource$Changes(this.context);\n      this.channels = new Resource$Channels(this.context);\n      this.comments = new Resource$Comments(this.context);\n      this.drives = new Resource$Drives(this.context);\n      this.files = new Resource$Files(this.context);\n      this.permissions = new Resource$Permissions(this.context);\n      this.replies = new Resource$Replies(this.context);\n      this.revisions = new Resource$Revisions(this.context);\n      this.teamdrives = new Resource$Teamdrives(this.context);\n    }\n  }\n  drive_v3.Drive = Drive;\n  class Resource$About {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/about').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$About = Resource$About;\n  class Resource$Changes {\n    constructor(context) {\n      this.context = context;\n    }\n    getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/changes/startPageToken').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['pageToken'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    watch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/changes/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['pageToken'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Changes = Resource$Changes;\n  class Resource$Channels {\n    constructor(context) {\n      this.context = context;\n    }\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Channels = Resource$Channels;\n  class Resource$Comments {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId'],\n        pathParams: ['commentId', 'fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId'],\n        pathParams: ['commentId', 'fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId'],\n        pathParams: ['commentId', 'fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Comments = Resource$Comments;\n  class Resource$Drives {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['requestId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['driveId'],\n        pathParams: ['driveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['driveId'],\n        pathParams: ['driveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    hide(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/drives/{driveId}/hide').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['driveId'],\n        pathParams: ['driveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unhide(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/drives/{driveId}/unhide').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['driveId'],\n        pathParams: ['driveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['driveId'],\n        pathParams: ['driveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Drives = Resource$Drives;\n  class Resource$Files {\n    constructor(context) {\n      this.context = context;\n    }\n    copy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/copy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    export(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'mimeType'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateIds(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/generateIds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/listLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    modifyLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/modifyLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    watch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Files = Resource$Files;\n  class Resource$Permissions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'permissionId'],\n        pathParams: ['fileId', 'permissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'permissionId'],\n        pathParams: ['fileId', 'permissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'permissionId'],\n        pathParams: ['fileId', 'permissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Permissions = Resource$Permissions;\n  class Resource$Replies {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId'],\n        pathParams: ['commentId', 'fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId', 'replyId'],\n        pathParams: ['commentId', 'fileId', 'replyId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId', 'replyId'],\n        pathParams: ['commentId', 'fileId', 'replyId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId'],\n        pathParams: ['commentId', 'fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'commentId', 'replyId'],\n        pathParams: ['commentId', 'fileId', 'replyId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Replies = Resource$Replies;\n  class Resource$Revisions {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'revisionId'],\n        pathParams: ['fileId', 'revisionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'revisionId'],\n        pathParams: ['fileId', 'revisionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/revisions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['fileId'],\n        pathParams: ['fileId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['fileId', 'revisionId'],\n        pathParams: ['fileId', 'revisionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Revisions = Resource$Revisions;\n  class Resource$Teamdrives {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['requestId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['teamDriveId'],\n        pathParams: ['teamDriveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['teamDriveId'],\n        pathParams: ['teamDriveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['teamDriveId'],\n        pathParams: ['teamDriveId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  drive_v3.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v3 || (exports.drive_v3 = drive_v3 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","drive_v3","googleapis_common_1","require","Drive","constructor","options","google","context","_options","about","Resource$About","changes","Resource$Changes","channels","Resource$Channels","comments","Resource$Comments","drives","Resource$Drives","files","Resource$Files","permissions","Resource$Permissions","replies","Resource$Replies","revisions","Resource$Revisions","teamdrives","Resource$Teamdrives","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","getStartPageToken","list","watch","stop","create","delete","update","hide","unhide","copy","mediaUrl","emptyTrash","export","generateIds","listLabels","modifyLabels"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/drive/v3.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drive_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar drive_v3;\n(function (drive_v3) {\n    /**\n     * Google Drive API\n     *\n     * The Google Drive API allows clients to access resources from Google Drive.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const drive = google.drive('v3');\n     * ```\n     */\n    class Drive {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.about = new Resource$About(this.context);\n            this.changes = new Resource$Changes(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.drives = new Resource$Drives(this.context);\n            this.files = new Resource$Files(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.replies = new Resource$Replies(this.context);\n            this.revisions = new Resource$Revisions(this.context);\n            this.teamdrives = new Resource$Teamdrives(this.context);\n        }\n    }\n    drive_v3.Drive = Drive;\n    class Resource$About {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/about').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$About = Resource$About;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        getStartPageToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/changes/startPageToken').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['pageToken'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/changes/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['pageToken'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Changes = Resource$Changes;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Channels = Resource$Channels;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Comments = Resource$Comments;\n    class Resource$Drives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['requestId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        hide(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/drives/{driveId}/hide').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/drives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unhide(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/drives/{driveId}/unhide').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/drives/{driveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['driveId'],\n                pathParams: ['driveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Drives = Resource$Drives;\n    class Resource$Files {\n        constructor(context) {\n            this.context = context;\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/copy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        emptyTrash(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/trash').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'mimeType'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateIds(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/generateIds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/listLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        modifyLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/modifyLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/drive/v3/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Files = Resource$Files;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'permissionId'],\n                pathParams: ['fileId', 'permissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Permissions = Resource$Permissions;\n    class Resource$Replies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/comments/{commentId}/replies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId'],\n                pathParams: ['commentId', 'fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/drive/v3/files/{fileId}/comments/{commentId}/replies/{replyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'commentId', 'replyId'],\n                pathParams: ['commentId', 'fileId', 'replyId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Replies = Resource$Replies;\n    class Resource$Revisions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['fileId'],\n                pathParams: ['fileId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/files/{fileId}/revisions/{revisionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['fileId', 'revisionId'],\n                pathParams: ['fileId', 'revisionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Revisions = Resource$Revisions;\n    class Resource$Teamdrives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['requestId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/drive/v3/teamdrives/{teamDriveId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['teamDriveId'],\n                pathParams: ['teamDriveId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    drive_v3.Resource$Teamdrives = Resource$Teamdrives;\n})(drive_v3 || (exports.drive_v3 = drive_v3 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}