{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloudsearch_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar cloudsearch_v1;\n(function (cloudsearch_v1) {\n  /**\n   * Cloud Search API\n   *\n   * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const cloudsearch = google.cloudsearch('v1');\n   * ```\n   */\n  class Cloudsearch {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.debug = new Resource$Debug(this.context);\n      this.indexing = new Resource$Indexing(this.context);\n      this.media = new Resource$Media(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.query = new Resource$Query(this.context);\n      this.settings = new Resource$Settings(this.context);\n      this.stats = new Resource$Stats(this.context);\n      this.v1 = new Resource$V1(this.context);\n    }\n  }\n  cloudsearch_v1.Cloudsearch = Cloudsearch;\n  class Resource$Debug {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Debug$Datasources(this.context);\n      this.identitysources = new Resource$Debug$Identitysources(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Debug = Resource$Debug;\n  class Resource$Debug$Datasources {\n    constructor(context) {\n      this.context = context;\n      this.items = new Resource$Debug$Datasources$Items(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n  class Resource$Debug$Datasources$Items {\n    constructor(context) {\n      this.context = context;\n      this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n    }\n    checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n  class Resource$Debug$Datasources$Items$Unmappedids {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n  class Resource$Debug$Identitysources {\n    constructor(context) {\n      this.context = context;\n      this.items = new Resource$Debug$Identitysources$Items(this.context);\n      this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n  class Resource$Debug$Identitysources$Items {\n    constructor(context) {\n      this.context = context;\n    }\n    listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n  class Resource$Debug$Identitysources$Unmappedids {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n  class Resource$Indexing {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Indexing$Datasources(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n  class Resource$Indexing$Datasources {\n    constructor(context) {\n      this.context = context;\n      this.items = new Resource$Indexing$Datasources$Items(this.context);\n    }\n    deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n  class Resource$Indexing$Datasources$Items {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    index(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    poll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    push(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unreserve(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Media = Resource$Media;\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n      this.lro = new Resource$Operations$Lro(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Operations = Resource$Operations;\n  class Resource$Operations$Lro {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/lro').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Operations$Lro = Resource$Operations$Lro;\n  class Resource$Query {\n    constructor(context) {\n      this.context = context;\n      this.sources = new Resource$Query$Sources(this.context);\n    }\n    removeActivity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/query:removeActivity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    suggest(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Query = Resource$Query;\n  class Resource$Query$Sources {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n  class Resource$Settings {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Settings$Datasources(this.context);\n      this.searchapplications = new Resource$Settings$Searchapplications(this.context);\n    }\n    getCustomer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateCustomer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Settings = Resource$Settings;\n  class Resource$Settings$Datasources {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n  class Resource$Settings$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    reset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n  class Resource$Stats {\n    constructor(context) {\n      this.context = context;\n      this.index = new Resource$Stats$Index(this.context);\n      this.query = new Resource$Stats$Query(this.context);\n      this.session = new Resource$Stats$Session(this.context);\n      this.user = new Resource$Stats$User(this.context);\n    }\n    getIndex(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getQuery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getSearchapplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/searchapplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getSession(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/session').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getUser(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/user').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Stats = Resource$Stats;\n  class Resource$Stats$Index {\n    constructor(context) {\n      this.context = context;\n      this.datasources = new Resource$Stats$Index$Datasources(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n  class Resource$Stats$Index$Datasources {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n  class Resource$Stats$Query {\n    constructor(context) {\n      this.context = context;\n      this.searchapplications = new Resource$Stats$Query$Searchapplications(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Stats$Query = Resource$Stats$Query;\n  class Resource$Stats$Query$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/query/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Stats$Query$Searchapplications = Resource$Stats$Query$Searchapplications;\n  class Resource$Stats$Session {\n    constructor(context) {\n      this.context = context;\n      this.searchapplications = new Resource$Stats$Session$Searchapplications(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Stats$Session = Resource$Stats$Session;\n  class Resource$Stats$Session$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/session/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Stats$Session$Searchapplications = Resource$Stats$Session$Searchapplications;\n  class Resource$Stats$User {\n    constructor(context) {\n      this.context = context;\n      this.searchapplications = new Resource$Stats$User$Searchapplications(this.context);\n    }\n  }\n  cloudsearch_v1.Resource$Stats$User = Resource$Stats$User;\n  class Resource$Stats$User$Searchapplications {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/stats/user/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$Stats$User$Searchapplications = Resource$Stats$User$Searchapplications;\n  class Resource$V1 {\n    constructor(context) {\n      this.context = context;\n    }\n    initializeCustomer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1:initializeCustomer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  cloudsearch_v1.Resource$V1 = Resource$V1;\n})(cloudsearch_v1 || (exports.cloudsearch_v1 = cloudsearch_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","cloudsearch_v1","googleapis_common_1","require","Cloudsearch","constructor","options","google","context","_options","debug","Resource$Debug","indexing","Resource$Indexing","media","Resource$Media","operations","Resource$Operations","query","Resource$Query","settings","Resource$Settings","stats","Resource$Stats","v1","Resource$V1","datasources","Resource$Debug$Datasources","identitysources","Resource$Debug$Identitysources","items","Resource$Debug$Datasources$Items","unmappedids","Resource$Debug$Datasources$Items$Unmappedids","checkAccess","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","searchByViewUrl","list","Resource$Debug$Identitysources$Items","Resource$Debug$Identitysources$Unmappedids","listForunmappedidentity","Resource$Indexing$Datasources","Resource$Indexing$Datasources$Items","deleteSchema","getSchema","updateSchema","delete","deleteQueueItems","get","index","poll","push","unreserve","upload","mediaUrl","lro","Resource$Operations$Lro","sources","Resource$Query$Sources","removeActivity","search","suggest","Resource$Settings$Datasources","searchapplications","Resource$Settings$Searchapplications","getCustomer","updateCustomer","create","patch","update","reset","Resource$Stats$Index","Resource$Stats$Query","session","Resource$Stats$Session","user","Resource$Stats$User","getIndex","getQuery","getSearchapplication","getSession","getUser","Resource$Stats$Index$Datasources","Resource$Stats$Query$Searchapplications","Resource$Stats$Session$Searchapplications","Resource$Stats$User$Searchapplications","initializeCustomer"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/cloudsearch/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloudsearch_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar cloudsearch_v1;\n(function (cloudsearch_v1) {\n    /**\n     * Cloud Search API\n     *\n     * Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const cloudsearch = google.cloudsearch('v1');\n     * ```\n     */\n    class Cloudsearch {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.debug = new Resource$Debug(this.context);\n            this.indexing = new Resource$Indexing(this.context);\n            this.media = new Resource$Media(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.query = new Resource$Query(this.context);\n            this.settings = new Resource$Settings(this.context);\n            this.stats = new Resource$Stats(this.context);\n            this.v1 = new Resource$V1(this.context);\n        }\n    }\n    cloudsearch_v1.Cloudsearch = Cloudsearch;\n    class Resource$Debug {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Debug$Datasources(this.context);\n            this.identitysources = new Resource$Debug$Identitysources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug = Resource$Debug;\n    class Resource$Debug$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Datasources$Items(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources = Resource$Debug$Datasources;\n    class Resource$Debug$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n            this.unmappedids = new Resource$Debug$Datasources$Items$Unmappedids(this.context);\n        }\n        checkAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}:checkAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        searchByViewUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+name}/items:searchByViewUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items = Resource$Debug$Datasources$Items;\n    class Resource$Debug$Datasources$Items$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Datasources$Items$Unmappedids = Resource$Debug$Datasources$Items$Unmappedids;\n    class Resource$Debug$Identitysources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Debug$Identitysources$Items(this.context);\n            this.unmappedids = new Resource$Debug$Identitysources$Unmappedids(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources = Resource$Debug$Identitysources;\n    class Resource$Debug$Identitysources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        listForunmappedidentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/items:forunmappedidentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Items = Resource$Debug$Identitysources$Items;\n    class Resource$Debug$Identitysources$Unmappedids {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/debug/{+parent}/unmappedids').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Debug$Identitysources$Unmappedids = Resource$Debug$Identitysources$Unmappedids;\n    class Resource$Indexing {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Indexing$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Indexing = Resource$Indexing;\n    class Resource$Indexing$Datasources {\n        constructor(context) {\n            this.context = context;\n            this.items = new Resource$Indexing$Datasources$Items(this.context);\n        }\n        deleteSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/schema').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources = Resource$Indexing$Datasources;\n    class Resource$Indexing$Datasources$Items {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteQueueItems(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:deleteQueueItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        index(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:index').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        poll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:poll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        push(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:push').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unreserve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}/items:unreserve').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/indexing/{+name}:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Indexing$Datasources$Items = Resource$Indexing$Datasources$Items;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v1/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Media = Resource$Media;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n            this.lro = new Resource$Operations$Lro(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Operations = Resource$Operations;\n    class Resource$Operations$Lro {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/lro').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Operations$Lro = Resource$Operations$Lro;\n    class Resource$Query {\n        constructor(context) {\n            this.context = context;\n            this.sources = new Resource$Query$Sources(this.context);\n        }\n        removeActivity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query:removeActivity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        suggest(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query = Resource$Query;\n    class Resource$Query$Sources {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/query/sources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Query$Sources = Resource$Query$Sources;\n    class Resource$Settings {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Settings$Datasources(this.context);\n            this.searchapplications = new Resource$Settings$Searchapplications(this.context);\n        }\n        getCustomer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateCustomer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/customer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings = Resource$Settings;\n    class Resource$Settings$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/datasources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Datasources = Resource$Settings$Datasources;\n    class Resource$Settings$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/searchapplications').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}:reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/settings/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Settings$Searchapplications = Resource$Settings$Searchapplications;\n    class Resource$Stats {\n        constructor(context) {\n            this.context = context;\n            this.index = new Resource$Stats$Index(this.context);\n            this.query = new Resource$Stats$Query(this.context);\n            this.session = new Resource$Stats$Session(this.context);\n            this.user = new Resource$Stats$User(this.context);\n        }\n        getIndex(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getQuery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/query').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSearchapplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/searchapplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSession(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/session').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getUser(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/user').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats = Resource$Stats;\n    class Resource$Stats$Index {\n        constructor(context) {\n            this.context = context;\n            this.datasources = new Resource$Stats$Index$Datasources(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index = Resource$Stats$Index;\n    class Resource$Stats$Index$Datasources {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/index/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Index$Datasources = Resource$Stats$Index$Datasources;\n    class Resource$Stats$Query {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$Query$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Query = Resource$Stats$Query;\n    class Resource$Stats$Query$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/query/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Query$Searchapplications = Resource$Stats$Query$Searchapplications;\n    class Resource$Stats$Session {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$Session$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Session = Resource$Stats$Session;\n    class Resource$Stats$Session$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/session/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$Session$Searchapplications = Resource$Stats$Session$Searchapplications;\n    class Resource$Stats$User {\n        constructor(context) {\n            this.context = context;\n            this.searchapplications = new Resource$Stats$User$Searchapplications(this.context);\n        }\n    }\n    cloudsearch_v1.Resource$Stats$User = Resource$Stats$User;\n    class Resource$Stats$User$Searchapplications {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/stats/user/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$Stats$User$Searchapplications = Resource$Stats$User$Searchapplications;\n    class Resource$V1 {\n        constructor(context) {\n            this.context = context;\n        }\n        initializeCustomer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://cloudsearch.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1:initializeCustomer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    cloudsearch_v1.Resource$V1 = Resource$V1;\n})(cloudsearch_v1 || (exports.cloudsearch_v1 = cloudsearch_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}