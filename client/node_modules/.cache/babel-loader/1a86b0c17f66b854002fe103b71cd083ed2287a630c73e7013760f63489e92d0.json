{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.monitoring_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar monitoring_v1;\n(function (monitoring_v1) {\n  /**\n   * Cloud Monitoring API\n   *\n   * Manages your Cloud Monitoring data and configurations.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const monitoring = google.monitoring('v1');\n   * ```\n   */\n  class Monitoring {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.locations = new Resource$Locations(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n  }\n  monitoring_v1.Monitoring = Monitoring;\n  class Resource$Locations {\n    constructor(context) {\n      this.context = context;\n      this.global = new Resource$Locations$Global(this.context);\n    }\n  }\n  monitoring_v1.Resource$Locations = Resource$Locations;\n  class Resource$Locations$Global {\n    constructor(context) {\n      this.context = context;\n      this.metricsScopes = new Resource$Locations$Global$Metricsscopes(this.context);\n    }\n  }\n  monitoring_v1.Resource$Locations$Global = Resource$Locations$Global;\n  class Resource$Locations$Global$Metricsscopes {\n    constructor(context) {\n      this.context = context;\n      this.projects = new Resource$Locations$Global$Metricsscopes$Projects(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listMetricsScopesByMonitoredProject(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/locations/global/metricsScopes:listMetricsScopesByMonitoredProject').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  monitoring_v1.Resource$Locations$Global$Metricsscopes = Resource$Locations$Global$Metricsscopes;\n  class Resource$Locations$Global$Metricsscopes$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  monitoring_v1.Resource$Locations$Global$Metricsscopes$Projects = Resource$Locations$Global$Metricsscopes$Projects;\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  monitoring_v1.Resource$Operations = Resource$Operations;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.dashboards = new Resource$Projects$Dashboards(this.context);\n      this.location = new Resource$Projects$Location(this.context);\n    }\n  }\n  monitoring_v1.Resource$Projects = Resource$Projects;\n  class Resource$Projects$Dashboards {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/dashboards').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/dashboards').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  monitoring_v1.Resource$Projects$Dashboards = Resource$Projects$Dashboards;\n  class Resource$Projects$Location {\n    constructor(context) {\n      this.context = context;\n      this.prometheus = new Resource$Projects$Location$Prometheus(this.context);\n    }\n  }\n  monitoring_v1.Resource$Projects$Location = Resource$Projects$Location;\n  class Resource$Projects$Location$Prometheus {\n    constructor(context) {\n      this.context = context;\n      this.api = new Resource$Projects$Location$Prometheus$Api(this.context);\n    }\n  }\n  monitoring_v1.Resource$Projects$Location$Prometheus = Resource$Projects$Location$Prometheus;\n  class Resource$Projects$Location$Prometheus$Api {\n    constructor(context) {\n      this.context = context;\n      this.v1 = new Resource$Projects$Location$Prometheus$Api$V1(this.context);\n    }\n  }\n  monitoring_v1.Resource$Projects$Location$Prometheus$Api = Resource$Projects$Location$Prometheus$Api;\n  class Resource$Projects$Location$Prometheus$Api$V1 {\n    constructor(context) {\n      this.context = context;\n      this.label = new Resource$Projects$Location$Prometheus$Api$V1$Label(this.context);\n      this.metadata = new Resource$Projects$Location$Prometheus$Api$V1$Metadata(this.context);\n    }\n    query(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/location/{location}/prometheus/api/v1/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name', 'location'],\n        pathParams: ['location', 'name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    query_range(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/location/{location}/prometheus/api/v1/query_range').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name', 'location'],\n        pathParams: ['location', 'name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    series(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/location/{location}/prometheus/api/v1/series').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name', 'location'],\n        pathParams: ['location', 'name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  monitoring_v1.Resource$Projects$Location$Prometheus$Api$V1 = Resource$Projects$Location$Prometheus$Api$V1;\n  class Resource$Projects$Location$Prometheus$Api$V1$Label {\n    constructor(context) {\n      this.context = context;\n    }\n    values(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/location/{location}/prometheus/api/v1/label/{label}/values').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name', 'location', 'label'],\n        pathParams: ['label', 'location', 'name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  monitoring_v1.Resource$Projects$Location$Prometheus$Api$V1$Label = Resource$Projects$Location$Prometheus$Api$V1$Label;\n  class Resource$Projects$Location$Prometheus$Api$V1$Metadata {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/location/{location}/prometheus/api/v1/metadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name', 'location'],\n        pathParams: ['location', 'name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  monitoring_v1.Resource$Projects$Location$Prometheus$Api$V1$Metadata = Resource$Projects$Location$Prometheus$Api$V1$Metadata;\n})(monitoring_v1 || (exports.monitoring_v1 = monitoring_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","monitoring_v1","googleapis_common_1","require","Monitoring","constructor","options","google","context","_options","locations","Resource$Locations","operations","Resource$Operations","projects","Resource$Projects","global","Resource$Locations$Global","metricsScopes","Resource$Locations$Global$Metricsscopes","Resource$Locations$Global$Metricsscopes$Projects","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","listMetricsScopesByMonitoredProject","create","delete","dashboards","Resource$Projects$Dashboards","location","Resource$Projects$Location","list","patch","prometheus","Resource$Projects$Location$Prometheus","api","Resource$Projects$Location$Prometheus$Api","v1","Resource$Projects$Location$Prometheus$Api$V1","label","Resource$Projects$Location$Prometheus$Api$V1$Label","metadata","Resource$Projects$Location$Prometheus$Api$V1$Metadata","query","query_range","series","values"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/monitoring/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.monitoring_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar monitoring_v1;\n(function (monitoring_v1) {\n    /**\n     * Cloud Monitoring API\n     *\n     * Manages your Cloud Monitoring data and configurations.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const monitoring = google.monitoring('v1');\n     * ```\n     */\n    class Monitoring {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.locations = new Resource$Locations(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    monitoring_v1.Monitoring = Monitoring;\n    class Resource$Locations {\n        constructor(context) {\n            this.context = context;\n            this.global = new Resource$Locations$Global(this.context);\n        }\n    }\n    monitoring_v1.Resource$Locations = Resource$Locations;\n    class Resource$Locations$Global {\n        constructor(context) {\n            this.context = context;\n            this.metricsScopes = new Resource$Locations$Global$Metricsscopes(this.context);\n        }\n    }\n    monitoring_v1.Resource$Locations$Global = Resource$Locations$Global;\n    class Resource$Locations$Global$Metricsscopes {\n        constructor(context) {\n            this.context = context;\n            this.projects = new Resource$Locations$Global$Metricsscopes$Projects(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listMetricsScopesByMonitoredProject(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/locations/global/metricsScopes:listMetricsScopesByMonitoredProject').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    monitoring_v1.Resource$Locations$Global$Metricsscopes = Resource$Locations$Global$Metricsscopes;\n    class Resource$Locations$Global$Metricsscopes$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    monitoring_v1.Resource$Locations$Global$Metricsscopes$Projects = Resource$Locations$Global$Metricsscopes$Projects;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    monitoring_v1.Resource$Operations = Resource$Operations;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.dashboards = new Resource$Projects$Dashboards(this.context);\n            this.location = new Resource$Projects$Location(this.context);\n        }\n    }\n    monitoring_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Dashboards {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/dashboards').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/dashboards').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    monitoring_v1.Resource$Projects$Dashboards = Resource$Projects$Dashboards;\n    class Resource$Projects$Location {\n        constructor(context) {\n            this.context = context;\n            this.prometheus = new Resource$Projects$Location$Prometheus(this.context);\n        }\n    }\n    monitoring_v1.Resource$Projects$Location = Resource$Projects$Location;\n    class Resource$Projects$Location$Prometheus {\n        constructor(context) {\n            this.context = context;\n            this.api = new Resource$Projects$Location$Prometheus$Api(this.context);\n        }\n    }\n    monitoring_v1.Resource$Projects$Location$Prometheus = Resource$Projects$Location$Prometheus;\n    class Resource$Projects$Location$Prometheus$Api {\n        constructor(context) {\n            this.context = context;\n            this.v1 = new Resource$Projects$Location$Prometheus$Api$V1(this.context);\n        }\n    }\n    monitoring_v1.Resource$Projects$Location$Prometheus$Api = Resource$Projects$Location$Prometheus$Api;\n    class Resource$Projects$Location$Prometheus$Api$V1 {\n        constructor(context) {\n            this.context = context;\n            this.label = new Resource$Projects$Location$Prometheus$Api$V1$Label(this.context);\n            this.metadata = new Resource$Projects$Location$Prometheus$Api$V1$Metadata(this.context);\n        }\n        query(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+name}/location/{location}/prometheus/api/v1/query').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name', 'location'],\n                pathParams: ['location', 'name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        query_range(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+name}/location/{location}/prometheus/api/v1/query_range').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name', 'location'],\n                pathParams: ['location', 'name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        series(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+name}/location/{location}/prometheus/api/v1/series').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name', 'location'],\n                pathParams: ['location', 'name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    monitoring_v1.Resource$Projects$Location$Prometheus$Api$V1 = Resource$Projects$Location$Prometheus$Api$V1;\n    class Resource$Projects$Location$Prometheus$Api$V1$Label {\n        constructor(context) {\n            this.context = context;\n        }\n        values(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+name}/location/{location}/prometheus/api/v1/label/{label}/values').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name', 'location', 'label'],\n                pathParams: ['label', 'location', 'name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    monitoring_v1.Resource$Projects$Location$Prometheus$Api$V1$Label = Resource$Projects$Location$Prometheus$Api$V1$Label;\n    class Resource$Projects$Location$Prometheus$Api$V1$Metadata {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://monitoring.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+name}/location/{location}/prometheus/api/v1/metadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name', 'location'],\n                pathParams: ['location', 'name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    monitoring_v1.Resource$Projects$Location$Prometheus$Api$V1$Metadata = Resource$Projects$Location$Prometheus$Api$V1$Metadata;\n})(monitoring_v1 || (exports.monitoring_v1 = monitoring_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}