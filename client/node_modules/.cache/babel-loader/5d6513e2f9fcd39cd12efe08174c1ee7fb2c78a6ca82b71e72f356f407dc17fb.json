{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.closeSession = exports.request = exports.sessions = void 0;\nconst http2 = require(\"http2\");\nconst zlib = require(\"zlib\");\nconst url_1 = require(\"url\");\nconst qs = require(\"qs\");\nconst extend = require(\"extend\");\nconst stream_1 = require(\"stream\");\nconst util = require(\"util\");\nconst process = require(\"process\");\nconst common_1 = require(\"gaxios/build/src/common\");\nconst {\n  HTTP2_HEADER_CONTENT_ENCODING,\n  HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS\n} = http2.constants;\nconst DEBUG = !!process.env.HTTP2_DEBUG;\n/**\n * List of sessions current in use.\n * @private\n */\nexports.sessions = {};\n/**\n * Public method to make an http2 request.\n * @param config - Request options.\n */\nasync function request(config) {\n  const opts = extend(true, {}, config);\n  opts.validateStatus = opts.validateStatus || validateStatus;\n  opts.responseType = opts.responseType || 'json';\n  const url = new url_1.URL(opts.url);\n  // Check for an existing session to this host, or go create a new one.\n  const sessionData = _getClient(url.host);\n  // Since we're using this session, clear the timeout handle to ensure\n  // it stays in memory and connected for a while further.\n  if (sessionData.timeoutHandle !== undefined) {\n    clearTimeout(sessionData.timeoutHandle);\n  }\n  // Assemble the querystring based on config.params.  We're using the\n  // `qs` module to make life a little easier.\n  let pathWithQs = url.pathname;\n  if (config.params && Object.keys(config.params).length > 0) {\n    const serializer = config.paramsSerializer || qs.stringify;\n    const q = serializer(opts.params);\n    pathWithQs += `?${q}`;\n  }\n  // Assemble the headers based on basic HTTP2 primitives (path, method) and\n  // custom headers sent from the consumer.  Note: I am using `Object.assign`\n  // here making the assumption these objects are not deep.  If it turns out\n  // they are, we may need to use the `extend` npm module for deep cloning.\n  const headers = Object.assign({}, opts.headers, {\n    [HTTP2_HEADER_PATH]: pathWithQs,\n    [HTTP2_HEADER_METHOD]: config.method || 'GET'\n  });\n  // NOTE: This is working around an upstream bug in `apirequest.ts`. The\n  // request path assumes that the `content-type` header is going to be set in\n  // the underlying HTTP Client. This hack provides bug for bug compatability\n  // with this bug in gaxios:\n  // https://github.com/googleapis/gaxios/blob/main/src/gaxios.ts#L202\n  if (!headers[HTTP2_HEADER_CONTENT_TYPE]) {\n    if (opts.responseType !== 'text') {\n      headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/json';\n    }\n  }\n  const res = {\n    config,\n    request: {},\n    headers: [],\n    status: 0,\n    data: {},\n    statusText: ''\n  };\n  const chunks = [];\n  const session = sessionData.session;\n  let req;\n  return new Promise((resolve, reject) => {\n    try {\n      req = session.request(headers).on('response', headers => {\n        res.headers = headers;\n        res.status = Number(headers[HTTP2_HEADER_STATUS]);\n        let stream = req;\n        if (headers[HTTP2_HEADER_CONTENT_ENCODING] === 'gzip') {\n          stream = req.pipe(zlib.createGunzip());\n        }\n        if (opts.responseType === 'stream') {\n          res.data = stream;\n          resolve(res);\n          return;\n        }\n        stream.on('data', d => {\n          chunks.push(d);\n        }).on('error', err => {\n          reject(err);\n          return;\n        }).on('end', () => {\n          const buf = Buffer.concat(chunks);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          let data = buf;\n          if (buf) {\n            if (opts.responseType === 'json') {\n              try {\n                data = JSON.parse(buf.toString('utf8'));\n              } catch (_a) {\n                data = buf.toString('utf8');\n              }\n            } else if (opts.responseType === 'text') {\n              data = buf.toString('utf8');\n            } else if (opts.responseType === 'arraybuffer') {\n              data = buf.buffer;\n            }\n            res.data = data;\n          }\n          if (!opts.validateStatus(res.status)) {\n            let message = `Request failed with status code ${res.status}. `;\n            if (res.data && typeof res.data === 'object') {\n              const body = util.inspect(res.data, {\n                depth: 5\n              });\n              message = `${message}\\n'${body}`;\n            }\n            reject(new common_1.GaxiosError(message, opts, res));\n          }\n          resolve(res);\n          return;\n        });\n      }).on('error', e => {\n        reject(e);\n        return;\n      });\n    } catch (e) {\n      closeSession(url);\n      reject(e);\n    }\n    res.request = req;\n    // If data was provided, write it to the request in the form of\n    // a stream, string data, or a basic object.\n    if (config.data) {\n      if (config.data instanceof stream_1.Stream) {\n        config.data.pipe(req);\n      } else if (typeof config.data === 'string') {\n        const data = Buffer.from(config.data);\n        req.end(data);\n      } else if (typeof config.data === 'object') {\n        const data = JSON.stringify(config.data);\n        req.end(data);\n      }\n    }\n    // Create a timeout so the Http2Session will be cleaned up after\n    // a period of non-use. 500 milliseconds was chosen because it's\n    // a nice round number, and I don't know what would be a better\n    // choice. Keeping this channel open will hold a file descriptor\n    // which will prevent the process from exiting.\n    sessionData.timeoutHandle = setTimeout(() => {\n      closeSession(url);\n    }, 500);\n  });\n}\nexports.request = request;\n/**\n * By default, throw for any non-2xx status code\n * @param status - status code from the HTTP response\n */\nfunction validateStatus(status) {\n  return status >= 200 && status < 300;\n}\n/**\n * Obtain an existing h2 session or go create a new one.\n * @param host - The hostname to which the session belongs.\n */\nfunction _getClient(host) {\n  if (!exports.sessions[host]) {\n    if (DEBUG) {\n      console.log(`Creating client for ${host}`);\n    }\n    const session = http2.connect(`https://${host}`);\n    session.on('error', e => {\n      console.error(`*ERROR*: ${e}`);\n      delete exports.sessions[host];\n    }).on('goaway', (errorCode, lastStreamId) => {\n      console.error(`*GOAWAY*: ${errorCode} : ${lastStreamId}`);\n      delete exports.sessions[host];\n    });\n    exports.sessions[host] = {\n      session\n    };\n  } else {\n    if (DEBUG) {\n      console.log(`Used cached client for ${host}`);\n    }\n  }\n  return exports.sessions[host];\n}\nasync function closeSession(url) {\n  const sessionData = exports.sessions[url.host];\n  if (!sessionData) {\n    return;\n  }\n  const {\n    session\n  } = sessionData;\n  delete exports.sessions[url.host];\n  if (DEBUG) {\n    console.error(`Closing ${url.host}`);\n  }\n  session.close(() => {\n    if (DEBUG) {\n      console.error(`Closed ${url.host}`);\n    }\n  });\n  setTimeout(() => {\n    if (session && !session.destroyed) {\n      if (DEBUG) {\n        console.log(`Forcing close ${url.host}`);\n      }\n      if (session) {\n        session.destroy();\n      }\n    }\n  }, 1000);\n}\nexports.closeSession = closeSession;","map":{"version":3,"names":["Object","defineProperty","exports","value","closeSession","request","sessions","http2","require","zlib","url_1","qs","extend","stream_1","util","process","common_1","HTTP2_HEADER_CONTENT_ENCODING","HTTP2_HEADER_CONTENT_TYPE","HTTP2_HEADER_METHOD","HTTP2_HEADER_PATH","HTTP2_HEADER_STATUS","constants","DEBUG","env","HTTP2_DEBUG","config","opts","validateStatus","responseType","url","URL","sessionData","_getClient","host","timeoutHandle","undefined","clearTimeout","pathWithQs","pathname","params","keys","length","serializer","paramsSerializer","stringify","q","headers","assign","method","res","status","data","statusText","chunks","session","req","Promise","resolve","reject","on","Number","stream","pipe","createGunzip","d","push","err","buf","Buffer","concat","JSON","parse","toString","_a","buffer","message","body","inspect","depth","GaxiosError","e","Stream","from","end","setTimeout","console","log","connect","error","errorCode","lastStreamId","close","destroyed","destroy"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis-common/build/src/http2.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.closeSession = exports.request = exports.sessions = void 0;\nconst http2 = require(\"http2\");\nconst zlib = require(\"zlib\");\nconst url_1 = require(\"url\");\nconst qs = require(\"qs\");\nconst extend = require(\"extend\");\nconst stream_1 = require(\"stream\");\nconst util = require(\"util\");\nconst process = require(\"process\");\nconst common_1 = require(\"gaxios/build/src/common\");\nconst { HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_STATUS, } = http2.constants;\nconst DEBUG = !!process.env.HTTP2_DEBUG;\n/**\n * List of sessions current in use.\n * @private\n */\nexports.sessions = {};\n/**\n * Public method to make an http2 request.\n * @param config - Request options.\n */\nasync function request(config) {\n    const opts = extend(true, {}, config);\n    opts.validateStatus = opts.validateStatus || validateStatus;\n    opts.responseType = opts.responseType || 'json';\n    const url = new url_1.URL(opts.url);\n    // Check for an existing session to this host, or go create a new one.\n    const sessionData = _getClient(url.host);\n    // Since we're using this session, clear the timeout handle to ensure\n    // it stays in memory and connected for a while further.\n    if (sessionData.timeoutHandle !== undefined) {\n        clearTimeout(sessionData.timeoutHandle);\n    }\n    // Assemble the querystring based on config.params.  We're using the\n    // `qs` module to make life a little easier.\n    let pathWithQs = url.pathname;\n    if (config.params && Object.keys(config.params).length > 0) {\n        const serializer = config.paramsSerializer || qs.stringify;\n        const q = serializer(opts.params);\n        pathWithQs += `?${q}`;\n    }\n    // Assemble the headers based on basic HTTP2 primitives (path, method) and\n    // custom headers sent from the consumer.  Note: I am using `Object.assign`\n    // here making the assumption these objects are not deep.  If it turns out\n    // they are, we may need to use the `extend` npm module for deep cloning.\n    const headers = Object.assign({}, opts.headers, {\n        [HTTP2_HEADER_PATH]: pathWithQs,\n        [HTTP2_HEADER_METHOD]: config.method || 'GET',\n    });\n    // NOTE: This is working around an upstream bug in `apirequest.ts`. The\n    // request path assumes that the `content-type` header is going to be set in\n    // the underlying HTTP Client. This hack provides bug for bug compatability\n    // with this bug in gaxios:\n    // https://github.com/googleapis/gaxios/blob/main/src/gaxios.ts#L202\n    if (!headers[HTTP2_HEADER_CONTENT_TYPE]) {\n        if (opts.responseType !== 'text') {\n            headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/json';\n        }\n    }\n    const res = {\n        config,\n        request: {},\n        headers: [],\n        status: 0,\n        data: {},\n        statusText: '',\n    };\n    const chunks = [];\n    const session = sessionData.session;\n    let req;\n    return new Promise((resolve, reject) => {\n        try {\n            req = session\n                .request(headers)\n                .on('response', headers => {\n                res.headers = headers;\n                res.status = Number(headers[HTTP2_HEADER_STATUS]);\n                let stream = req;\n                if (headers[HTTP2_HEADER_CONTENT_ENCODING] === 'gzip') {\n                    stream = req.pipe(zlib.createGunzip());\n                }\n                if (opts.responseType === 'stream') {\n                    res.data = stream;\n                    resolve(res);\n                    return;\n                }\n                stream\n                    .on('data', d => {\n                    chunks.push(d);\n                })\n                    .on('error', err => {\n                    reject(err);\n                    return;\n                })\n                    .on('end', () => {\n                    const buf = Buffer.concat(chunks);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    let data = buf;\n                    if (buf) {\n                        if (opts.responseType === 'json') {\n                            try {\n                                data = JSON.parse(buf.toString('utf8'));\n                            }\n                            catch (_a) {\n                                data = buf.toString('utf8');\n                            }\n                        }\n                        else if (opts.responseType === 'text') {\n                            data = buf.toString('utf8');\n                        }\n                        else if (opts.responseType === 'arraybuffer') {\n                            data = buf.buffer;\n                        }\n                        res.data = data;\n                    }\n                    if (!opts.validateStatus(res.status)) {\n                        let message = `Request failed with status code ${res.status}. `;\n                        if (res.data && typeof res.data === 'object') {\n                            const body = util.inspect(res.data, { depth: 5 });\n                            message = `${message}\\n'${body}`;\n                        }\n                        reject(new common_1.GaxiosError(message, opts, res));\n                    }\n                    resolve(res);\n                    return;\n                });\n            })\n                .on('error', e => {\n                reject(e);\n                return;\n            });\n        }\n        catch (e) {\n            closeSession(url);\n            reject(e);\n        }\n        res.request = req;\n        // If data was provided, write it to the request in the form of\n        // a stream, string data, or a basic object.\n        if (config.data) {\n            if (config.data instanceof stream_1.Stream) {\n                config.data.pipe(req);\n            }\n            else if (typeof config.data === 'string') {\n                const data = Buffer.from(config.data);\n                req.end(data);\n            }\n            else if (typeof config.data === 'object') {\n                const data = JSON.stringify(config.data);\n                req.end(data);\n            }\n        }\n        // Create a timeout so the Http2Session will be cleaned up after\n        // a period of non-use. 500 milliseconds was chosen because it's\n        // a nice round number, and I don't know what would be a better\n        // choice. Keeping this channel open will hold a file descriptor\n        // which will prevent the process from exiting.\n        sessionData.timeoutHandle = setTimeout(() => {\n            closeSession(url);\n        }, 500);\n    });\n}\nexports.request = request;\n/**\n * By default, throw for any non-2xx status code\n * @param status - status code from the HTTP response\n */\nfunction validateStatus(status) {\n    return status >= 200 && status < 300;\n}\n/**\n * Obtain an existing h2 session or go create a new one.\n * @param host - The hostname to which the session belongs.\n */\nfunction _getClient(host) {\n    if (!exports.sessions[host]) {\n        if (DEBUG) {\n            console.log(`Creating client for ${host}`);\n        }\n        const session = http2.connect(`https://${host}`);\n        session\n            .on('error', e => {\n            console.error(`*ERROR*: ${e}`);\n            delete exports.sessions[host];\n        })\n            .on('goaway', (errorCode, lastStreamId) => {\n            console.error(`*GOAWAY*: ${errorCode} : ${lastStreamId}`);\n            delete exports.sessions[host];\n        });\n        exports.sessions[host] = { session };\n    }\n    else {\n        if (DEBUG) {\n            console.log(`Used cached client for ${host}`);\n        }\n    }\n    return exports.sessions[host];\n}\nasync function closeSession(url) {\n    const sessionData = exports.sessions[url.host];\n    if (!sessionData) {\n        return;\n    }\n    const { session } = sessionData;\n    delete exports.sessions[url.host];\n    if (DEBUG) {\n        console.error(`Closing ${url.host}`);\n    }\n    session.close(() => {\n        if (DEBUG) {\n            console.error(`Closed ${url.host}`);\n        }\n    });\n    setTimeout(() => {\n        if (session && !session.destroyed) {\n            if (DEBUG) {\n                console.log(`Forcing close ${url.host}`);\n            }\n            if (session) {\n                session.destroy();\n            }\n        }\n    }, 1000);\n}\nexports.closeSession = closeSession;\n//# sourceMappingURL=http2.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}