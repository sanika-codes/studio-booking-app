{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.chromepolicy_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar chromepolicy_v1;\n(function (chromepolicy_v1) {\n  /**\n   * Chrome Policy API\n   *\n   * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const chromepolicy = google.chromepolicy('v1');\n   * ```\n   */\n  class Chromepolicy {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.customers = new Resource$Customers(this.context);\n      this.media = new Resource$Media(this.context);\n    }\n  }\n  chromepolicy_v1.Chromepolicy = Chromepolicy;\n  class Resource$Customers {\n    constructor(context) {\n      this.context = context;\n      this.policies = new Resource$Customers$Policies(this.context);\n      this.policySchemas = new Resource$Customers$Policyschemas(this.context);\n    }\n  }\n  chromepolicy_v1.Resource$Customers = Resource$Customers;\n  class Resource$Customers$Policies {\n    constructor(context) {\n      this.context = context;\n      this.groups = new Resource$Customers$Policies$Groups(this.context);\n      this.networks = new Resource$Customers$Policies$Networks(this.context);\n      this.orgunits = new Resource$Customers$Policies$Orgunits(this.context);\n    }\n    resolve(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies:resolve').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  chromepolicy_v1.Resource$Customers$Policies = Resource$Customers$Policies;\n  class Resource$Customers$Policies$Groups {\n    constructor(context) {\n      this.context = context;\n    }\n    batchDelete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/groups:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    batchModify(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/groups:batchModify').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listGroupPriorityOrdering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/groups:listGroupPriorityOrdering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateGroupPriorityOrdering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/groups:updateGroupPriorityOrdering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  chromepolicy_v1.Resource$Customers$Policies$Groups = Resource$Customers$Policies$Groups;\n  class Resource$Customers$Policies$Networks {\n    constructor(context) {\n      this.context = context;\n    }\n    defineCertificate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/networks:defineCertificate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    defineNetwork(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/networks:defineNetwork').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeCertificate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/networks:removeCertificate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeNetwork(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/networks:removeNetwork').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  chromepolicy_v1.Resource$Customers$Policies$Networks = Resource$Customers$Policies$Networks;\n  class Resource$Customers$Policies$Orgunits {\n    constructor(context) {\n      this.context = context;\n    }\n    batchInherit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/orgunits:batchInherit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    batchModify(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/orgunits:batchModify').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  chromepolicy_v1.Resource$Customers$Policies$Orgunits = Resource$Customers$Policies$Orgunits;\n  class Resource$Customers$Policyschemas {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/policySchemas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  chromepolicy_v1.Resource$Customers$Policyschemas = Resource$Customers$Policyschemas;\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+customer}/policies/files:uploadPolicyFile').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v1/{+customer}/policies/files:uploadPolicyFile').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  chromepolicy_v1.Resource$Media = Resource$Media;\n})(chromepolicy_v1 || (exports.chromepolicy_v1 = chromepolicy_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","chromepolicy_v1","googleapis_common_1","require","Chromepolicy","constructor","options","google","context","_options","customers","Resource$Customers","media","Resource$Media","policies","Resource$Customers$Policies","policySchemas","Resource$Customers$Policyschemas","groups","Resource$Customers$Policies$Groups","networks","Resource$Customers$Policies$Networks","orgunits","Resource$Customers$Policies$Orgunits","resolve","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","batchDelete","batchModify","listGroupPriorityOrdering","updateGroupPriorityOrdering","defineCertificate","defineNetwork","removeCertificate","removeNetwork","batchInherit","get","list","upload","mediaUrl"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/chromepolicy/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chromepolicy_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar chromepolicy_v1;\n(function (chromepolicy_v1) {\n    /**\n     * Chrome Policy API\n     *\n     * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const chromepolicy = google.chromepolicy('v1');\n     * ```\n     */\n    class Chromepolicy {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.customers = new Resource$Customers(this.context);\n            this.media = new Resource$Media(this.context);\n        }\n    }\n    chromepolicy_v1.Chromepolicy = Chromepolicy;\n    class Resource$Customers {\n        constructor(context) {\n            this.context = context;\n            this.policies = new Resource$Customers$Policies(this.context);\n            this.policySchemas = new Resource$Customers$Policyschemas(this.context);\n        }\n    }\n    chromepolicy_v1.Resource$Customers = Resource$Customers;\n    class Resource$Customers$Policies {\n        constructor(context) {\n            this.context = context;\n            this.groups = new Resource$Customers$Policies$Groups(this.context);\n            this.networks = new Resource$Customers$Policies$Networks(this.context);\n            this.orgunits = new Resource$Customers$Policies$Orgunits(this.context);\n        }\n        resolve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies:resolve').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    chromepolicy_v1.Resource$Customers$Policies = Resource$Customers$Policies;\n    class Resource$Customers$Policies$Groups {\n        constructor(context) {\n            this.context = context;\n        }\n        batchDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/groups:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        batchModify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/groups:batchModify').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listGroupPriorityOrdering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+customer}/policies/groups:listGroupPriorityOrdering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateGroupPriorityOrdering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+customer}/policies/groups:updateGroupPriorityOrdering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    chromepolicy_v1.Resource$Customers$Policies$Groups = Resource$Customers$Policies$Groups;\n    class Resource$Customers$Policies$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        defineCertificate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/networks:defineCertificate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        defineNetwork(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/networks:defineNetwork').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeCertificate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/networks:removeCertificate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeNetwork(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/networks:removeNetwork').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    chromepolicy_v1.Resource$Customers$Policies$Networks = Resource$Customers$Policies$Networks;\n    class Resource$Customers$Policies$Orgunits {\n        constructor(context) {\n            this.context = context;\n        }\n        batchInherit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/orgunits:batchInherit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        batchModify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/orgunits:batchModify').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    chromepolicy_v1.Resource$Customers$Policies$Orgunits = Resource$Customers$Policies$Orgunits;\n    class Resource$Customers$Policyschemas {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/policySchemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    chromepolicy_v1.Resource$Customers$Policyschemas = Resource$Customers$Policyschemas;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://chromepolicy.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+customer}/policies/files:uploadPolicyFile').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v1/{+customer}/policies/files:uploadPolicyFile').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    chromepolicy_v1.Resource$Media = Resource$Media;\n})(chromepolicy_v1 || (exports.chromepolicy_v1 = chromepolicy_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}