{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compute_beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar compute_beta;\n(function (compute_beta) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const compute = google.compute('beta');\n   * ```\n   */\n  class Compute {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n      this.addresses = new Resource$Addresses(this.context);\n      this.autoscalers = new Resource$Autoscalers(this.context);\n      this.backendBuckets = new Resource$Backendbuckets(this.context);\n      this.backendServices = new Resource$Backendservices(this.context);\n      this.disks = new Resource$Disks(this.context);\n      this.diskTypes = new Resource$Disktypes(this.context);\n      this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n      this.firewallPolicies = new Resource$Firewallpolicies(this.context);\n      this.firewalls = new Resource$Firewalls(this.context);\n      this.forwardingRules = new Resource$Forwardingrules(this.context);\n      this.globalAddresses = new Resource$Globaladdresses(this.context);\n      this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n      this.globalNetworkEndpointGroups = new Resource$Globalnetworkendpointgroups(this.context);\n      this.globalOperations = new Resource$Globaloperations(this.context);\n      this.globalOrganizationOperations = new Resource$Globalorganizationoperations(this.context);\n      this.globalPublicDelegatedPrefixes = new Resource$Globalpublicdelegatedprefixes(this.context);\n      this.healthChecks = new Resource$Healthchecks(this.context);\n      this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n      this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n      this.imageFamilyViews = new Resource$Imagefamilyviews(this.context);\n      this.images = new Resource$Images(this.context);\n      this.instanceGroupManagerResizeRequests = new Resource$Instancegroupmanagerresizerequests(this.context);\n      this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n      this.instanceGroups = new Resource$Instancegroups(this.context);\n      this.instances = new Resource$Instances(this.context);\n      this.instanceTemplates = new Resource$Instancetemplates(this.context);\n      this.instantSnapshots = new Resource$Instantsnapshots(this.context);\n      this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n      this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n      this.interconnectRemoteLocations = new Resource$Interconnectremotelocations(this.context);\n      this.interconnects = new Resource$Interconnects(this.context);\n      this.licenseCodes = new Resource$Licensecodes(this.context);\n      this.licenses = new Resource$Licenses(this.context);\n      this.machineImages = new Resource$Machineimages(this.context);\n      this.machineTypes = new Resource$Machinetypes(this.context);\n      this.networkAttachments = new Resource$Networkattachments(this.context);\n      this.networkEdgeSecurityServices = new Resource$Networkedgesecurityservices(this.context);\n      this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n      this.networkFirewallPolicies = new Resource$Networkfirewallpolicies(this.context);\n      this.networks = new Resource$Networks(this.context);\n      this.nodeGroups = new Resource$Nodegroups(this.context);\n      this.nodeTemplates = new Resource$Nodetemplates(this.context);\n      this.nodeTypes = new Resource$Nodetypes(this.context);\n      this.organizationSecurityPolicies = new Resource$Organizationsecuritypolicies(this.context);\n      this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.publicAdvertisedPrefixes = new Resource$Publicadvertisedprefixes(this.context);\n      this.publicDelegatedPrefixes = new Resource$Publicdelegatedprefixes(this.context);\n      this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n      this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n      this.regionCommitments = new Resource$Regioncommitments(this.context);\n      this.regionDisks = new Resource$Regiondisks(this.context);\n      this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n      this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n      this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n      this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n      this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n      this.regionInstances = new Resource$Regioninstances(this.context);\n      this.regionInstanceTemplates = new Resource$Regioninstancetemplates(this.context);\n      this.regionInstantSnapshots = new Resource$Regioninstantsnapshots(this.context);\n      this.regionNetworkEndpointGroups = new Resource$Regionnetworkendpointgroups(this.context);\n      this.regionNetworkFirewallPolicies = new Resource$Regionnetworkfirewallpolicies(this.context);\n      this.regionNotificationEndpoints = new Resource$Regionnotificationendpoints(this.context);\n      this.regionOperations = new Resource$Regionoperations(this.context);\n      this.regions = new Resource$Regions(this.context);\n      this.regionSecurityPolicies = new Resource$Regionsecuritypolicies(this.context);\n      this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n      this.regionSslPolicies = new Resource$Regionsslpolicies(this.context);\n      this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n      this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n      this.regionTargetTcpProxies = new Resource$Regiontargettcpproxies(this.context);\n      this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n      this.regionZones = new Resource$Regionzones(this.context);\n      this.reservations = new Resource$Reservations(this.context);\n      this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n      this.routers = new Resource$Routers(this.context);\n      this.routes = new Resource$Routes(this.context);\n      this.securityPolicies = new Resource$Securitypolicies(this.context);\n      this.serviceAttachments = new Resource$Serviceattachments(this.context);\n      this.snapshots = new Resource$Snapshots(this.context);\n      this.snapshotSettings = new Resource$Snapshotsettings(this.context);\n      this.sslCertificates = new Resource$Sslcertificates(this.context);\n      this.sslPolicies = new Resource$Sslpolicies(this.context);\n      this.subnetworks = new Resource$Subnetworks(this.context);\n      this.targetGrpcProxies = new Resource$Targetgrpcproxies(this.context);\n      this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n      this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n      this.targetInstances = new Resource$Targetinstances(this.context);\n      this.targetPools = new Resource$Targetpools(this.context);\n      this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n      this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n      this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n      this.urlMaps = new Resource$Urlmaps(this.context);\n      this.vpnGateways = new Resource$Vpngateways(this.context);\n      this.vpnTunnels = new Resource$Vpntunnels(this.context);\n      this.zoneOperations = new Resource$Zoneoperations(this.context);\n      this.zones = new Resource$Zones(this.context);\n    }\n  }\n  compute_beta.Compute = Compute;\n  class Resource$Acceleratortypes {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'acceleratorType'],\n        pathParams: ['acceleratorType', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Acceleratortypes = Resource$Acceleratortypes;\n  class Resource$Addresses {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Addresses = Resource$Addresses;\n  class Resource$Autoscalers {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Autoscalers = Resource$Autoscalers;\n  class Resource$Backendbuckets {\n    constructor(context) {\n      this.context = context;\n    }\n    addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket', 'keyName'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Backendbuckets = Resource$Backendbuckets;\n  class Resource$Backendservices {\n    constructor(context) {\n      this.context = context;\n    }\n    addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService', 'keyName'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Backendservices = Resource$Backendservices;\n  class Resource$Disks {\n    constructor(context) {\n      this.context = context;\n    }\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Disks = Resource$Disks;\n  class Resource$Disktypes {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'diskType'],\n        pathParams: ['diskType', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Disktypes = Resource$Disktypes;\n  class Resource$Externalvpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'externalVpnGateway'],\n        pathParams: ['externalVpnGateway', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'externalVpnGateway'],\n        pathParams: ['externalVpnGateway', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Externalvpngateways = Resource$Externalvpngateways;\n  class Resource$Firewallpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firewallPolicy'],\n        pathParams: ['firewallPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Firewallpolicies = Resource$Firewallpolicies;\n  class Resource$Firewalls {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Firewalls = Resource$Firewalls;\n  class Resource$Forwardingrules {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setTarget(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Forwardingrules = Resource$Forwardingrules;\n  class Resource$Globaladdresses {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Globaladdresses = Resource$Globaladdresses;\n  class Resource$Globalforwardingrules {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setTarget(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n  class Resource$Globalnetworkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n    attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n  class Resource$Globaloperations {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Globaloperations = Resource$Globaloperations;\n  class Resource$Globalorganizationoperations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['operation'],\n        pathParams: ['operation'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['operation'],\n        pathParams: ['operation'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n  class Resource$Globalpublicdelegatedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Globalpublicdelegatedprefixes = Resource$Globalpublicdelegatedprefixes;\n  class Resource$Healthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Healthchecks = Resource$Healthchecks;\n  class Resource$Httphealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Httphealthchecks = Resource$Httphealthchecks;\n  class Resource$Httpshealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n  class Resource$Imagefamilyviews {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/imageFamilyViews/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'family'],\n        pathParams: ['family', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Imagefamilyviews = Resource$Imagefamilyviews;\n  class Resource$Images {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deprecate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'family'],\n        pathParams: ['family', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Images = Resource$Images;\n  class Resource$Instancegroupmanagerresizerequests {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager', 'resizeRequest'],\n        pathParams: ['instanceGroupManager', 'project', 'resizeRequest', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager', 'resizeRequest'],\n        pathParams: ['instanceGroupManager', 'project', 'resizeRequest', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Instancegroupmanagerresizerequests = Resource$Instancegroupmanagerresizerequests;\n  class Resource$Instancegroupmanagers {\n    constructor(context) {\n      this.context = context;\n    }\n    abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    createInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listErrors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n  class Resource$Instancegroups {\n    constructor(context) {\n      this.context = context;\n    }\n    addInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Instancegroups = Resource$Instancegroups;\n  class Resource$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n    addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    reset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    sendDiagnosticInterrupt(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setName(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setTags(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    start(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    suspend(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Instances = Resource$Instances;\n  class Resource$Instancetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Instancetemplates = Resource$Instancetemplates;\n  class Resource$Instantsnapshots {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Instantsnapshots = Resource$Instantsnapshots;\n  class Resource$Interconnectattachments {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Interconnectattachments = Resource$Interconnectattachments;\n  class Resource$Interconnectlocations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnectLocation'],\n        pathParams: ['interconnectLocation', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Interconnectlocations = Resource$Interconnectlocations;\n  class Resource$Interconnectremotelocations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnectRemoteLocation'],\n        pathParams: ['interconnectRemoteLocation', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnectRemoteLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Interconnectremotelocations = Resource$Interconnectremotelocations;\n  class Resource$Interconnects {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getMacsecConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getMacsecConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Interconnects = Resource$Interconnects;\n  class Resource$Licensecodes {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'licenseCode'],\n        pathParams: ['licenseCode', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Licensecodes = Resource$Licensecodes;\n  class Resource$Licenses {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'license'],\n        pathParams: ['license', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'license'],\n        pathParams: ['license', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Licenses = Resource$Licenses;\n  class Resource$Machineimages {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'machineImage'],\n        pathParams: ['machineImage', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'machineImage'],\n        pathParams: ['machineImage', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Machineimages = Resource$Machineimages;\n  class Resource$Machinetypes {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'machineType'],\n        pathParams: ['machineType', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Machinetypes = Resource$Machinetypes;\n  class Resource$Networkattachments {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/networkAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkAttachment'],\n        pathParams: ['networkAttachment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkAttachment'],\n        pathParams: ['networkAttachment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkAttachment'],\n        pathParams: ['networkAttachment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Networkattachments = Resource$Networkattachments;\n  class Resource$Networkedgesecurityservices {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n        pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n        pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n        pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Networkedgesecurityservices = Resource$Networkedgesecurityservices;\n  class Resource$Networkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n  class Resource$Networkfirewallpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Networkfirewallpolicies = Resource$Networkfirewallpolicies;\n  class Resource$Networks {\n    constructor(context) {\n      this.context = context;\n    }\n    addPeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removePeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Networks = Resource$Networks;\n  class Resource$Nodegroups {\n    constructor(context) {\n      this.context = context;\n    }\n    addNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'initialNodeCount'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Nodegroups = Resource$Nodegroups;\n  class Resource$Nodetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'nodeTemplate'],\n        pathParams: ['nodeTemplate', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'nodeTemplate'],\n        pathParams: ['nodeTemplate', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Nodetemplates = Resource$Nodetemplates;\n  class Resource$Nodetypes {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeType'],\n        pathParams: ['nodeType', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Nodetypes = Resource$Nodetypes;\n  class Resource$Organizationsecuritypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    copyRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n  class Resource$Packetmirrorings {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Packetmirrorings = Resource$Packetmirrorings;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n    disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setManagedProtectionTier(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/setManagedProtectionTier').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Projects = Resource$Projects;\n  class Resource$Publicadvertisedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Publicadvertisedprefixes = Resource$Publicadvertisedprefixes;\n  class Resource$Publicdelegatedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Publicdelegatedprefixes = Resource$Publicdelegatedprefixes;\n  class Resource$Regionautoscalers {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionautoscalers = Resource$Regionautoscalers;\n  class Resource$Regionbackendservices {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionbackendservices = Resource$Regionbackendservices;\n  class Resource$Regioncommitments {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regioncommitments = Resource$Regioncommitments;\n  class Resource$Regiondisks {\n    constructor(context) {\n      this.context = context;\n    }\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regiondisks = Resource$Regiondisks;\n  class Resource$Regiondisktypes {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'diskType'],\n        pathParams: ['diskType', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regiondisktypes = Resource$Regiondisktypes;\n  class Resource$Regionhealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n  class Resource$Regionhealthcheckservices {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n  class Resource$Regioninstancegroupmanagers {\n    constructor(context) {\n      this.context = context;\n    }\n    abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    createInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listErrors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n  class Resource$Regioninstancegroups {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n  class Resource$Regioninstances {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regioninstances = Resource$Regioninstances;\n  class Resource$Regioninstancetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regioninstancetemplates = Resource$Regioninstancetemplates;\n  class Resource$Regioninstantsnapshots {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instantSnapshot'],\n        pathParams: ['instantSnapshot', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regioninstantsnapshots = Resource$Regioninstantsnapshots;\n  class Resource$Regionnetworkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n    attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n  class Resource$Regionnetworkfirewallpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'network'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'firewallPolicy'],\n        pathParams: ['firewallPolicy', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionnetworkfirewallpolicies = Resource$Regionnetworkfirewallpolicies;\n  class Resource$Regionnotificationendpoints {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'notificationEndpoint'],\n        pathParams: ['notificationEndpoint', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'notificationEndpoint'],\n        pathParams: ['notificationEndpoint', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n  class Resource$Regionoperations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionoperations = Resource$Regionoperations;\n  class Resource$Regions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regions = Resource$Regions;\n  class Resource$Regionsecuritypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'securityPolicy'],\n        pathParams: ['project', 'region', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionsecuritypolicies = Resource$Regionsecuritypolicies;\n  class Resource$Regionsslcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslCertificate'],\n        pathParams: ['project', 'region', 'sslCertificate'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslCertificate'],\n        pathParams: ['project', 'region', 'sslCertificate'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n  class Resource$Regionsslpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslPolicy'],\n        pathParams: ['project', 'region', 'sslPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslPolicy'],\n        pathParams: ['project', 'region', 'sslPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslPolicy'],\n        pathParams: ['project', 'region', 'sslPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionsslpolicies = Resource$Regionsslpolicies;\n  class Resource$Regiontargethttpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n  class Resource$Regiontargethttpsproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n  class Resource$Regiontargettcpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetTcpProxy'],\n        pathParams: ['project', 'region', 'targetTcpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetTcpProxy'],\n        pathParams: ['project', 'region', 'targetTcpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regiontargettcpproxies = Resource$Regiontargettcpproxies;\n  class Resource$Regionurlmaps {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionurlmaps = Resource$Regionurlmaps;\n  class Resource$Regionzones {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Regionzones = Resource$Regionzones;\n  class Resource$Reservations {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Reservations = Resource$Reservations;\n  class Resource$Resourcepolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resourcePolicy'],\n        pathParams: ['project', 'region', 'resourcePolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resourcePolicy'],\n        pathParams: ['project', 'region', 'resourcePolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resourcePolicy'],\n        pathParams: ['project', 'region', 'resourcePolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Resourcepolicies = Resource$Resourcepolicies;\n  class Resource$Routers {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getNatIpInfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatIpInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    preview(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Routers = Resource$Routers;\n  class Resource$Routes {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'route'],\n        pathParams: ['project', 'route'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'route'],\n        pathParams: ['project', 'route'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Routes = Resource$Routes;\n  class Resource$Securitypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Securitypolicies = Resource$Securitypolicies;\n  class Resource$Serviceattachments {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'serviceAttachment'],\n        pathParams: ['project', 'region', 'serviceAttachment'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'serviceAttachment'],\n        pathParams: ['project', 'region', 'serviceAttachment'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'serviceAttachment'],\n        pathParams: ['project', 'region', 'serviceAttachment'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Serviceattachments = Resource$Serviceattachments;\n  class Resource$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'snapshot'],\n        pathParams: ['project', 'snapshot'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'snapshot'],\n        pathParams: ['project', 'snapshot'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Snapshots = Resource$Snapshots;\n  class Resource$Snapshotsettings {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshotSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/snapshotSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Snapshotsettings = Resource$Snapshotsettings;\n  class Resource$Sslcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslCertificate'],\n        pathParams: ['project', 'sslCertificate'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslCertificate'],\n        pathParams: ['project', 'sslCertificate'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Sslcertificates = Resource$Sslcertificates;\n  class Resource$Sslpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Sslpolicies = Resource$Sslpolicies;\n  class Resource$Subnetworks {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listUsable(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Subnetworks = Resource$Subnetworks;\n  class Resource$Targetgrpcproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetGrpcProxy'],\n        pathParams: ['project', 'targetGrpcProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetGrpcProxy'],\n        pathParams: ['project', 'targetGrpcProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetGrpcProxy'],\n        pathParams: ['project', 'targetGrpcProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetGrpcProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targetgrpcproxies = Resource$Targetgrpcproxies;\n  class Resource$Targethttpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targethttpproxies = Resource$Targethttpproxies;\n  class Resource$Targethttpsproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n  class Resource$Targetinstances {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'targetInstance'],\n        pathParams: ['project', 'targetInstance', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'targetInstance'],\n        pathParams: ['project', 'targetInstance', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'targetInstance'],\n        pathParams: ['project', 'targetInstance', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targetinstances = Resource$Targetinstances;\n  class Resource$Targetpools {\n    constructor(context) {\n      this.context = context;\n    }\n    addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    addInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setBackup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targetpools = Resource$Targetpools;\n  class Resource$Targetsslproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targetsslproxies = Resource$Targetsslproxies;\n  class Resource$Targettcpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targettcpproxies = Resource$Targettcpproxies;\n  class Resource$Targetvpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetVpnGateway'],\n        pathParams: ['project', 'region', 'targetVpnGateway'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetVpnGateway'],\n        pathParams: ['project', 'region', 'targetVpnGateway'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Targetvpngateways = Resource$Targetvpngateways;\n  class Resource$Urlmaps {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Urlmaps = Resource$Urlmaps;\n  class Resource$Vpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Vpngateways = Resource$Vpngateways;\n  class Resource$Vpntunnels {\n    constructor(context) {\n      this.context = context;\n    }\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnTunnel'],\n        pathParams: ['project', 'region', 'vpnTunnel'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnTunnel'],\n        pathParams: ['project', 'region', 'vpnTunnel'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Vpntunnels = Resource$Vpntunnels;\n  class Resource$Zoneoperations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Zoneoperations = Resource$Zoneoperations;\n  class Resource$Zones {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/beta/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  compute_beta.Resource$Zones = Resource$Zones;\n})(compute_beta || (exports.compute_beta = compute_beta = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","compute_beta","googleapis_common_1","require","Compute","constructor","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","externalVpnGateways","Resource$Externalvpngateways","firewallPolicies","Resource$Firewallpolicies","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalNetworkEndpointGroups","Resource$Globalnetworkendpointgroups","globalOperations","Resource$Globaloperations","globalOrganizationOperations","Resource$Globalorganizationoperations","globalPublicDelegatedPrefixes","Resource$Globalpublicdelegatedprefixes","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","imageFamilyViews","Resource$Imagefamilyviews","images","Resource$Images","instanceGroupManagerResizeRequests","Resource$Instancegroupmanagerresizerequests","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","instantSnapshots","Resource$Instantsnapshots","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnectRemoteLocations","Resource$Interconnectremotelocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineImages","Resource$Machineimages","machineTypes","Resource$Machinetypes","networkAttachments","Resource$Networkattachments","networkEdgeSecurityServices","Resource$Networkedgesecurityservices","networkEndpointGroups","Resource$Networkendpointgroups","networkFirewallPolicies","Resource$Networkfirewallpolicies","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","organizationSecurityPolicies","Resource$Organizationsecuritypolicies","packetMirrorings","Resource$Packetmirrorings","projects","Resource$Projects","publicAdvertisedPrefixes","Resource$Publicadvertisedprefixes","publicDelegatedPrefixes","Resource$Publicdelegatedprefixes","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionHealthChecks","Resource$Regionhealthchecks","regionHealthCheckServices","Resource$Regionhealthcheckservices","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionInstances","Resource$Regioninstances","regionInstanceTemplates","Resource$Regioninstancetemplates","regionInstantSnapshots","Resource$Regioninstantsnapshots","regionNetworkEndpointGroups","Resource$Regionnetworkendpointgroups","regionNetworkFirewallPolicies","Resource$Regionnetworkfirewallpolicies","regionNotificationEndpoints","Resource$Regionnotificationendpoints","regionOperations","Resource$Regionoperations","regions","Resource$Regions","regionSecurityPolicies","Resource$Regionsecuritypolicies","regionSslCertificates","Resource$Regionsslcertificates","regionSslPolicies","Resource$Regionsslpolicies","regionTargetHttpProxies","Resource$Regiontargethttpproxies","regionTargetHttpsProxies","Resource$Regiontargethttpsproxies","regionTargetTcpProxies","Resource$Regiontargettcpproxies","regionUrlMaps","Resource$Regionurlmaps","regionZones","Resource$Regionzones","reservations","Resource$Reservations","resourcePolicies","Resource$Resourcepolicies","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","serviceAttachments","Resource$Serviceattachments","snapshots","Resource$Snapshots","snapshotSettings","Resource$Snapshotsettings","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetGrpcProxies","Resource$Targetgrpcproxies","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnGateways","Resource$Vpngateways","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zones","Resource$Zones","aggregatedList","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","delete","insert","move","setLabels","testIamPermissions","patch","update","addSignedUrlKey","deleteSignedUrlKey","getIamPolicy","setEdgeSecurityPolicy","setIamPolicy","getHealth","setSecurityPolicy","addResourcePolicies","bulkInsert","createSnapshot","removeResourcePolicies","resize","startAsyncReplication","stopAsyncReplication","stopGroupAsyncReplication","addAssociation","addRule","cloneRules","getAssociation","getRule","listAssociations","patchRule","removeAssociation","removeRule","setTarget","attachNetworkEndpoints","detachNetworkEndpoints","listNetworkEndpoints","wait","deprecate","getFromFamily","abandonInstances","applyUpdatesToInstances","createInstances","deleteInstances","deletePerInstanceConfigs","listErrors","listManagedInstances","listPerInstanceConfigs","patchPerInstanceConfigs","recreateInstances","resizeAdvanced","setAutoHealingPolicies","setInstanceTemplate","setTargetPools","updatePerInstanceConfigs","addInstances","listInstances","removeInstances","setNamedPorts","addAccessConfig","attachDisk","deleteAccessConfig","detachDisk","getEffectiveFirewalls","getGuestAttributes","getScreenshot","getSerialPortOutput","getShieldedInstanceIdentity","getShieldedVmIdentity","listReferrers","reset","resume","sendDiagnosticInterrupt","setDeletionProtection","setDiskAutoDelete","setMachineResources","setMachineType","setMetadata","setMinCpuPlatform","setName","setScheduling","setServiceAccount","setShieldedInstanceIntegrityPolicy","setShieldedVmIntegrityPolicy","setTags","simulateMaintenanceEvent","start","startWithEncryptionKey","stop","suspend","updateAccessConfig","updateDisplayDevice","updateNetworkInterface","updateShieldedInstanceConfig","updateShieldedVmConfig","getDiagnostics","getMacsecConfig","addPeering","listPeeringRoutes","removePeering","switchToCustomMode","updatePeering","addNodes","deleteNodes","listNodes","setNodeTemplate","copyRules","disableXpnHost","disableXpnResource","enableXpnHost","enableXpnResource","getXpnHost","getXpnResources","listXpnHosts","moveDisk","moveInstance","setCommonInstanceMetadata","setDefaultNetworkTier","setManagedProtectionTier","setUsageExportBucket","updateReservations","listAvailableFeatures","setUrlMap","setSslCertificates","invalidateCache","validate","getNatIpInfo","getNatMappingInfo","getRouterStatus","preview","listPreconfiguredExpressionSets","expandIpCidrRange","listUsable","setPrivateIpGoogleAccess","setCertificateMap","setQuicOverride","setSslPolicy","addHealthCheck","addInstance","removeHealthCheck","removeInstance","setBackup","setBackendService","setProxyHeader","getStatus"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/compute/beta.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compute_beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar compute_beta;\n(function (compute_beta) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const compute = google.compute('beta');\n     * ```\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n            this.firewallPolicies = new Resource$Firewallpolicies(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n            this.globalNetworkEndpointGroups =\n                new Resource$Globalnetworkendpointgroups(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.globalOrganizationOperations =\n                new Resource$Globalorganizationoperations(this.context);\n            this.globalPublicDelegatedPrefixes =\n                new Resource$Globalpublicdelegatedprefixes(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.imageFamilyViews = new Resource$Imagefamilyviews(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagerResizeRequests =\n                new Resource$Instancegroupmanagerresizerequests(this.context);\n            this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.instantSnapshots = new Resource$Instantsnapshots(this.context);\n            this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n            this.interconnectRemoteLocations =\n                new Resource$Interconnectremotelocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineImages = new Resource$Machineimages(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkAttachments = new Resource$Networkattachments(this.context);\n            this.networkEdgeSecurityServices =\n                new Resource$Networkedgesecurityservices(this.context);\n            this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n            this.networkFirewallPolicies = new Resource$Networkfirewallpolicies(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.organizationSecurityPolicies =\n                new Resource$Organizationsecuritypolicies(this.context);\n            this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.publicAdvertisedPrefixes = new Resource$Publicadvertisedprefixes(this.context);\n            this.publicDelegatedPrefixes = new Resource$Publicdelegatedprefixes(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n            this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n            this.regionInstanceGroupManagers =\n                new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n            this.regionInstances = new Resource$Regioninstances(this.context);\n            this.regionInstanceTemplates = new Resource$Regioninstancetemplates(this.context);\n            this.regionInstantSnapshots = new Resource$Regioninstantsnapshots(this.context);\n            this.regionNetworkEndpointGroups =\n                new Resource$Regionnetworkendpointgroups(this.context);\n            this.regionNetworkFirewallPolicies =\n                new Resource$Regionnetworkfirewallpolicies(this.context);\n            this.regionNotificationEndpoints =\n                new Resource$Regionnotificationendpoints(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.regionSecurityPolicies = new Resource$Regionsecuritypolicies(this.context);\n            this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n            this.regionSslPolicies = new Resource$Regionsslpolicies(this.context);\n            this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n            this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n            this.regionTargetTcpProxies = new Resource$Regiontargettcpproxies(this.context);\n            this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n            this.regionZones = new Resource$Regionzones(this.context);\n            this.reservations = new Resource$Reservations(this.context);\n            this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.serviceAttachments = new Resource$Serviceattachments(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.snapshotSettings = new Resource$Snapshotsettings(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetGrpcProxies = new Resource$Targetgrpcproxies(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnGateways = new Resource$Vpngateways(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_beta.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setEdgeSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Externalvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Externalvpngateways = Resource$Externalvpngateways;\n    class Resource$Firewallpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firewallPolicy'],\n                pathParams: ['firewallPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Firewallpolicies = Resource$Firewallpolicies;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{address}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globalnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Globalorganizationoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n    class Resource$Globalpublicdelegatedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Globalpublicdelegatedprefixes = Resource$Globalpublicdelegatedprefixes;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Imagefamilyviews {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/imageFamilyViews/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'family'],\n                pathParams: ['family', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Imagefamilyviews = Resource$Imagefamilyviews;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagerresizerequests {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instanceGroupManager',\n                    'resizeRequest',\n                ],\n                pathParams: [\n                    'instanceGroupManager',\n                    'project',\n                    'resizeRequest',\n                    'zone',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instanceGroupManager',\n                    'resizeRequest',\n                ],\n                pathParams: [\n                    'instanceGroupManager',\n                    'project',\n                    'resizeRequest',\n                    'zone',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancegroupmanagerresizerequests = Resource$Instancegroupmanagerresizerequests;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'accessConfig',\n                    'networkInterface',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        sendDiagnosticInterrupt(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'autoDelete',\n                    'deviceName',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setName(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        suspend(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Instantsnapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Instantsnapshots = Resource$Instantsnapshots;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnectremotelocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectRemoteLocation'],\n                pathParams: ['interconnectRemoteLocation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnectRemoteLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnectremotelocations = Resource$Interconnectremotelocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getMacsecConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}/getMacsecConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Licenses = Resource$Licenses;\n    class Resource$Machineimages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Machineimages = Resource$Machineimages;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/networkAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkAttachment'],\n                pathParams: ['networkAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkAttachment'],\n                pathParams: ['networkAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkAttachment'],\n                pathParams: ['networkAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networkattachments = Resource$Networkattachments;\n    class Resource$Networkedgesecurityservices {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n                pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n                pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEdgeSecurityService'],\n                pathParams: ['networkEdgeSecurityService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networkedgesecurityservices = Resource$Networkedgesecurityservices;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networkfirewallpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networkfirewallpolicies = Resource$Networkfirewallpolicies;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Organizationsecuritypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        copyRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n    class Resource$Packetmirrorings {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Packetmirrorings = Resource$Packetmirrorings;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setManagedProtectionTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/setManagedProtectionTier').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Projects = Resource$Projects;\n    class Resource$Publicadvertisedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Publicadvertisedprefixes = Resource$Publicadvertisedprefixes;\n    class Resource$Publicdelegatedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Publicdelegatedprefixes = Resource$Publicdelegatedprefixes;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        startAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/startAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}/stopAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stopGroupAsyncReplication(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/stopGroupAsyncReplication').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regionhealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n    class Resource$Regionhealthcheckservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regioninstances {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkInsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instances/bulkInsert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstances = Resource$Regioninstances;\n    class Resource$Regioninstancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstancetemplates = Resource$Regioninstancetemplates;\n    class Resource$Regioninstantsnapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instantSnapshot'],\n                pathParams: ['instantSnapshot', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regioninstantsnapshots = Resource$Regioninstantsnapshots;\n    class Resource$Regionnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n    class Resource$Regionnetworkfirewallpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cloneRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'network'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'firewallPolicy'],\n                pathParams: ['firewallPolicy', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionnetworkfirewallpolicies = Resource$Regionnetworkfirewallpolicies;\n    class Resource$Regionnotificationendpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regions = Resource$Regions;\n    class Resource$Regionsecuritypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'securityPolicy'],\n                pathParams: ['project', 'region', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionsecuritypolicies = Resource$Regionsecuritypolicies;\n    class Resource$Regionsslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n    class Resource$Regionsslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslPolicy'],\n                pathParams: ['project', 'region', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslPolicy'],\n                pathParams: ['project', 'region', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslPolicy'],\n                pathParams: ['project', 'region', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionsslpolicies = Resource$Regionsslpolicies;\n    class Resource$Regiontargethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n    class Resource$Regiontargethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n    class Resource$Regiontargettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetTcpProxy'],\n                pathParams: ['project', 'region', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetTcpProxy'],\n                pathParams: ['project', 'region', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regiontargettcpproxies = Resource$Regiontargettcpproxies;\n    class Resource$Regionurlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionurlmaps = Resource$Regionurlmaps;\n    class Resource$Regionzones {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Regionzones = Resource$Regionzones;\n    class Resource$Reservations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Reservations = Resource$Reservations;\n    class Resource$Resourcepolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Resourcepolicies = Resource$Resourcepolicies;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getNatIpInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatIpInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Serviceattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'serviceAttachment'],\n                pathParams: ['project', 'region', 'serviceAttachment'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'serviceAttachment'],\n                pathParams: ['project', 'region', 'serviceAttachment'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'serviceAttachment'],\n                pathParams: ['project', 'region', 'serviceAttachment'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Serviceattachments = Resource$Serviceattachments;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Snapshotsettings {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshotSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/snapshotSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Snapshotsettings = Resource$Snapshotsettings;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targetgrpcproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetGrpcProxy'],\n                pathParams: ['project', 'targetGrpcProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetGrpcProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetgrpcproxies = Resource$Targetgrpcproxies;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setCertificateMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Vpngateways = Resource$Vpngateways;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/beta/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/beta/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    compute_beta.Resource$Zones = Resource$Zones;\n})(compute_beta || (exports.compute_beta = compute_beta = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}