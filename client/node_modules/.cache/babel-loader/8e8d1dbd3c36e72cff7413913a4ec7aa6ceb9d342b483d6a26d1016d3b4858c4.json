{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Discovery = void 0;\nconst fs = require(\"fs\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst resolve = require(\"url\");\nconst util = require(\"util\");\nconst apirequest_1 = require(\"./apirequest\");\nconst endpoint_1 = require(\"./endpoint\");\nconst readFile = util.promisify(fs.readFile);\nclass Discovery {\n  /**\n   * Discovery for discovering API endpoints\n   *\n   * @param options Options for discovery\n   */\n  constructor(options) {\n    this.transporter = new google_auth_library_1.DefaultTransporter();\n    this.options = options || {};\n  }\n  /**\n   * Generate and Endpoint from an endpoint schema object.\n   *\n   * @param schema The schema from which to generate the Endpoint.\n   * @return A function that creates an endpoint.\n   */\n  makeEndpoint(schema) {\n    return options => {\n      const ep = new endpoint_1.Endpoint(options);\n      ep.applySchema(ep, schema, schema, ep);\n      return ep;\n    };\n  }\n  /**\n   * Log output of generator. Works just like console.log\n   */\n  log(...args) {\n    if (this.options && this.options.debug) {\n      console.log(...args);\n    }\n  }\n  /**\n   * Generate all APIs and return as in-memory object.\n   * @param discoveryUrl\n   */\n  async discoverAllAPIs(discoveryUrl) {\n    const headers = this.options.includePrivate ? {} : {\n      'X-User-Ip': '0.0.0.0'\n    };\n    const res = await this.transporter.request({\n      url: discoveryUrl,\n      headers\n    });\n    const items = res.data.items;\n    const apis = await Promise.all(items.map(async api => {\n      const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n      return {\n        api,\n        endpointCreator\n      };\n    }));\n    const versionIndex = {};\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const apisIndex = {};\n    for (const set of apis) {\n      if (!apisIndex[set.api.name]) {\n        versionIndex[set.api.name] = {};\n        apisIndex[set.api.name] = options => {\n          const type = typeof options;\n          let version;\n          if (type === 'string') {\n            version = options;\n            options = {};\n          } else if (type === 'object') {\n            version = options.version;\n            delete options.version;\n          } else {\n            throw new Error('Argument error: Accepts only string or object');\n          }\n          try {\n            const ep = set.endpointCreator(options, this);\n            return Object.freeze(ep); // create new & freeze\n          } catch (e) {\n            throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n          }\n        };\n      }\n      versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n    }\n    return apisIndex;\n  }\n  /**\n   * Generate API file given discovery URL\n   *\n   * @param apiDiscoveryUrl URL or filename of discovery doc for API\n   * @returns A promise that resolves with a function that creates the endpoint\n   */\n  async discoverAPI(apiDiscoveryUrl) {\n    if (typeof apiDiscoveryUrl === 'string') {\n      const parts = resolve.parse(apiDiscoveryUrl);\n      if (apiDiscoveryUrl && !parts.protocol) {\n        this.log('Reading from file ' + apiDiscoveryUrl);\n        const file = await readFile(apiDiscoveryUrl, {\n          encoding: 'utf8'\n        });\n        return this.makeEndpoint(JSON.parse(file));\n      } else {\n        this.log('Requesting ' + apiDiscoveryUrl);\n        const res = await this.transporter.request({\n          url: apiDiscoveryUrl\n        });\n        return this.makeEndpoint(res.data);\n      }\n    } else {\n      const options = apiDiscoveryUrl;\n      this.log('Requesting ' + options.url);\n      const url = options.url;\n      delete options.url;\n      const parameters = {\n        options: {\n          url,\n          method: 'GET'\n        },\n        requiredParams: [],\n        pathParams: [],\n        params: options,\n        context: {\n          google: {\n            _options: {}\n          },\n          _options: {}\n        }\n      };\n      const res = await (0, apirequest_1.createAPIRequest)(parameters);\n      return this.makeEndpoint(res.data);\n    }\n  }\n}\nexports.Discovery = Discovery;","map":{"version":3,"names":["Object","defineProperty","exports","value","Discovery","fs","require","google_auth_library_1","resolve","util","apirequest_1","endpoint_1","readFile","promisify","constructor","options","transporter","DefaultTransporter","makeEndpoint","schema","ep","Endpoint","applySchema","log","args","debug","console","discoverAllAPIs","discoveryUrl","headers","includePrivate","res","request","url","items","data","apis","Promise","all","map","api","endpointCreator","discoverAPI","discoveryRestUrl","versionIndex","apisIndex","set","name","type","version","Error","freeze","e","format","message","apiDiscoveryUrl","parts","parse","protocol","file","encoding","JSON","parameters","method","requiredParams","pathParams","params","context","google","_options","createAPIRequest"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis-common/build/src/discovery.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Discovery = void 0;\nconst fs = require(\"fs\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst resolve = require(\"url\");\nconst util = require(\"util\");\nconst apirequest_1 = require(\"./apirequest\");\nconst endpoint_1 = require(\"./endpoint\");\nconst readFile = util.promisify(fs.readFile);\nclass Discovery {\n    /**\n     * Discovery for discovering API endpoints\n     *\n     * @param options Options for discovery\n     */\n    constructor(options) {\n        this.transporter = new google_auth_library_1.DefaultTransporter();\n        this.options = options || {};\n    }\n    /**\n     * Generate and Endpoint from an endpoint schema object.\n     *\n     * @param schema The schema from which to generate the Endpoint.\n     * @return A function that creates an endpoint.\n     */\n    makeEndpoint(schema) {\n        return (options) => {\n            const ep = new endpoint_1.Endpoint(options);\n            ep.applySchema(ep, schema, schema, ep);\n            return ep;\n        };\n    }\n    /**\n     * Log output of generator. Works just like console.log\n     */\n    log(...args) {\n        if (this.options && this.options.debug) {\n            console.log(...args);\n        }\n    }\n    /**\n     * Generate all APIs and return as in-memory object.\n     * @param discoveryUrl\n     */\n    async discoverAllAPIs(discoveryUrl) {\n        const headers = this.options.includePrivate\n            ? {}\n            : { 'X-User-Ip': '0.0.0.0' };\n        const res = await this.transporter.request({\n            url: discoveryUrl,\n            headers,\n        });\n        const items = res.data.items;\n        const apis = await Promise.all(items.map(async (api) => {\n            const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n            return { api, endpointCreator };\n        }));\n        const versionIndex = {};\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const apisIndex = {};\n        for (const set of apis) {\n            if (!apisIndex[set.api.name]) {\n                versionIndex[set.api.name] = {};\n                apisIndex[set.api.name] = (options) => {\n                    const type = typeof options;\n                    let version;\n                    if (type === 'string') {\n                        version = options;\n                        options = {};\n                    }\n                    else if (type === 'object') {\n                        version = options.version;\n                        delete options.version;\n                    }\n                    else {\n                        throw new Error('Argument error: Accepts only string or object');\n                    }\n                    try {\n                        const ep = set.endpointCreator(options, this);\n                        return Object.freeze(ep); // create new & freeze\n                    }\n                    catch (e) {\n                        throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n                    }\n                };\n            }\n            versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n        }\n        return apisIndex;\n    }\n    /**\n     * Generate API file given discovery URL\n     *\n     * @param apiDiscoveryUrl URL or filename of discovery doc for API\n     * @returns A promise that resolves with a function that creates the endpoint\n     */\n    async discoverAPI(apiDiscoveryUrl) {\n        if (typeof apiDiscoveryUrl === 'string') {\n            const parts = resolve.parse(apiDiscoveryUrl);\n            if (apiDiscoveryUrl && !parts.protocol) {\n                this.log('Reading from file ' + apiDiscoveryUrl);\n                const file = await readFile(apiDiscoveryUrl, { encoding: 'utf8' });\n                return this.makeEndpoint(JSON.parse(file));\n            }\n            else {\n                this.log('Requesting ' + apiDiscoveryUrl);\n                const res = await this.transporter.request({\n                    url: apiDiscoveryUrl,\n                });\n                return this.makeEndpoint(res.data);\n            }\n        }\n        else {\n            const options = apiDiscoveryUrl;\n            this.log('Requesting ' + options.url);\n            const url = options.url;\n            delete options.url;\n            const parameters = {\n                options: { url, method: 'GET' },\n                requiredParams: [],\n                pathParams: [],\n                params: options,\n                context: { google: { _options: {} }, _options: {} },\n            };\n            const res = await (0, apirequest_1.createAPIRequest)(parameters);\n            return this.makeEndpoint(res.data);\n        }\n    }\n}\nexports.Discovery = Discovery;\n//# sourceMappingURL=discovery.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}