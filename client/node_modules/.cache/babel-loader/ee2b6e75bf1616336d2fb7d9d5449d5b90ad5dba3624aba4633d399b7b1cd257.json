{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.admin_directory_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar admin_directory_v1;\n(function (admin_directory_v1) {\n  /**\n   * Admin SDK API\n   *\n   * Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const admin = google.admin('directory_v1');\n   * ```\n   */\n  class Admin {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.asps = new Resource$Asps(this.context);\n      this.channels = new Resource$Channels(this.context);\n      this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n      this.customer = new Resource$Customer(this.context);\n      this.customers = new Resource$Customers(this.context);\n      this.domainAliases = new Resource$Domainaliases(this.context);\n      this.domains = new Resource$Domains(this.context);\n      this.groups = new Resource$Groups(this.context);\n      this.members = new Resource$Members(this.context);\n      this.mobiledevices = new Resource$Mobiledevices(this.context);\n      this.orgunits = new Resource$Orgunits(this.context);\n      this.privileges = new Resource$Privileges(this.context);\n      this.resources = new Resource$Resources(this.context);\n      this.roleAssignments = new Resource$Roleassignments(this.context);\n      this.roles = new Resource$Roles(this.context);\n      this.schemas = new Resource$Schemas(this.context);\n      this.tokens = new Resource$Tokens(this.context);\n      this.twoStepVerification = new Resource$Twostepverification(this.context);\n      this.users = new Resource$Users(this.context);\n      this.verificationCodes = new Resource$Verificationcodes(this.context);\n    }\n  }\n  admin_directory_v1.Admin = Admin;\n  class Resource$Asps {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'codeId'],\n        pathParams: ['codeId', 'userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'codeId'],\n        pathParams: ['codeId', 'userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Asps = Resource$Asps;\n  class Resource$Channels {\n    constructor(context) {\n      this.context = context;\n    }\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Channels = Resource$Channels;\n  class Resource$Chromeosdevices {\n    constructor(context) {\n      this.context = context;\n    }\n    action(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n  class Resource$Customer {\n    constructor(context) {\n      this.context = context;\n      this.devices = new Resource$Customer$Devices(this.context);\n    }\n  }\n  admin_directory_v1.Resource$Customer = Resource$Customer;\n  class Resource$Customer$Devices {\n    constructor(context) {\n      this.context = context;\n      this.chromeos = new Resource$Customer$Devices$Chromeos(this.context);\n    }\n  }\n  admin_directory_v1.Resource$Customer$Devices = Resource$Customer$Devices;\n  class Resource$Customer$Devices$Chromeos {\n    constructor(context) {\n      this.context = context;\n      this.commands = new Resource$Customer$Devices$Chromeos$Commands(this.context);\n    }\n    issueCommand(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId'],\n        pathParams: ['customerId', 'deviceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Customer$Devices$Chromeos = Resource$Customer$Devices$Chromeos;\n  class Resource$Customer$Devices$Chromeos$Commands {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'deviceId', 'commandId'],\n        pathParams: ['commandId', 'customerId', 'deviceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Customer$Devices$Chromeos$Commands = Resource$Customer$Devices$Chromeos$Commands;\n  class Resource$Customers {\n    constructor(context) {\n      this.context = context;\n      this.chrome = new Resource$Customers$Chrome(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerKey'],\n        pathParams: ['customerKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Customers = Resource$Customers;\n  class Resource$Customers$Chrome {\n    constructor(context) {\n      this.context = context;\n      this.printers = new Resource$Customers$Chrome$Printers(this.context);\n      this.printServers = new Resource$Customers$Chrome$Printservers(this.context);\n    }\n  }\n  admin_directory_v1.Resource$Customers$Chrome = Resource$Customers$Chrome;\n  class Resource$Customers$Chrome$Printers {\n    constructor(context) {\n      this.context = context;\n    }\n    batchCreatePrinters(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers:batchCreatePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    batchDeletePrinters(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers:batchDeletePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listPrinterModels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers:listPrinterModels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Customers$Chrome$Printers = Resource$Customers$Chrome$Printers;\n  class Resource$Customers$Chrome$Printservers {\n    constructor(context) {\n      this.context = context;\n    }\n    batchCreatePrintServers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printServers:batchCreatePrintServers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    batchDeletePrintServers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printServers:batchDeletePrintServers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printServers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printServers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Customers$Chrome$Printservers = Resource$Customers$Chrome$Printservers;\n  class Resource$Domainaliases {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainAliasName'],\n        pathParams: ['customer', 'domainAliasName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainAliasName'],\n        pathParams: ['customer', 'domainAliasName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n  class Resource$Domains {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainName'],\n        pathParams: ['customer', 'domainName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'domainName'],\n        pathParams: ['customer', 'domainName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Domains = Resource$Domains;\n  class Resource$Groups {\n    constructor(context) {\n      this.context = context;\n      this.aliases = new Resource$Groups$Aliases(this.context);\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Groups = Resource$Groups;\n  class Resource$Groups$Aliases {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'alias'],\n        pathParams: ['alias', 'groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n  class Resource$Members {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    hasMember(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['groupKey'],\n        pathParams: ['groupKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['groupKey', 'memberKey'],\n        pathParams: ['groupKey', 'memberKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Members = Resource$Members;\n  class Resource$Mobiledevices {\n    constructor(context) {\n      this.context = context;\n    }\n    action(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'resourceId'],\n        pathParams: ['customerId', 'resourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n  class Resource$Orgunits {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'orgUnitPath'],\n        pathParams: ['customerId', 'orgUnitPath'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n  class Resource$Privileges {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/ALL/privileges').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Privileges = Resource$Privileges;\n  class Resource$Resources {\n    constructor(context) {\n      this.context = context;\n      this.buildings = new Resource$Resources$Buildings(this.context);\n      this.calendars = new Resource$Resources$Calendars(this.context);\n      this.features = new Resource$Resources$Features(this.context);\n    }\n  }\n  admin_directory_v1.Resource$Resources = Resource$Resources;\n  class Resource$Resources$Buildings {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'buildingId'],\n        pathParams: ['buildingId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n  class Resource$Resources$Calendars {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'calendarResourceId'],\n        pathParams: ['calendarResourceId', 'customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n  class Resource$Resources$Features {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rename(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer', 'oldName'],\n        pathParams: ['customer', 'oldName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'featureKey'],\n        pathParams: ['customer', 'featureKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n  class Resource$Roleassignments {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleAssignmentId'],\n        pathParams: ['customer', 'roleAssignmentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleAssignmentId'],\n        pathParams: ['customer', 'roleAssignmentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n  class Resource$Roles {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customer'],\n        pathParams: ['customer'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customer', 'roleId'],\n        pathParams: ['customer', 'roleId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Roles = Resource$Roles;\n  class Resource$Schemas {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customerId'],\n        pathParams: ['customerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['customerId', 'schemaKey'],\n        pathParams: ['customerId', 'schemaKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Schemas = Resource$Schemas;\n  class Resource$Tokens {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'clientId'],\n        pathParams: ['clientId', 'userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'clientId'],\n        pathParams: ['clientId', 'userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Tokens = Resource$Tokens;\n  class Resource$Twostepverification {\n    constructor(context) {\n      this.context = context;\n    }\n    turnOff(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Twostepverification = Resource$Twostepverification;\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n      this.aliases = new Resource$Users$Aliases(this.context);\n      this.photos = new Resource$Users$Photos(this.context);\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    signOut(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/signOut').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    undelete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    watch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Users = Resource$Users;\n  class Resource$Users$Aliases {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey', 'alias'],\n        pathParams: ['alias', 'userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    watch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n  class Resource$Users$Photos {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n  class Resource$Verificationcodes {\n    constructor(context) {\n      this.context = context;\n    }\n    generate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    invalidate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userKey'],\n        pathParams: ['userKey'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 || (exports.admin_directory_v1 = admin_directory_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","admin_directory_v1","googleapis_common_1","require","Admin","constructor","options","google","context","_options","asps","Resource$Asps","channels","Resource$Channels","chromeosdevices","Resource$Chromeosdevices","customer","Resource$Customer","customers","Resource$Customers","domainAliases","Resource$Domainaliases","domains","Resource$Domains","groups","Resource$Groups","members","Resource$Members","mobiledevices","Resource$Mobiledevices","orgunits","Resource$Orgunits","privileges","Resource$Privileges","resources","Resource$Resources","roleAssignments","Resource$Roleassignments","roles","Resource$Roles","schemas","Resource$Schemas","tokens","Resource$Tokens","twoStepVerification","Resource$Twostepverification","users","Resource$Users","verificationCodes","Resource$Verificationcodes","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","stop","action","moveDevicesToOu","patch","update","devices","Resource$Customer$Devices","chromeos","Resource$Customer$Devices$Chromeos","commands","Resource$Customer$Devices$Chromeos$Commands","issueCommand","chrome","Resource$Customers$Chrome","printers","Resource$Customers$Chrome$Printers","printServers","Resource$Customers$Chrome$Printservers","batchCreatePrinters","batchDeletePrinters","create","listPrinterModels","batchCreatePrintServers","batchDeletePrintServers","insert","aliases","Resource$Groups$Aliases","hasMember","buildings","Resource$Resources$Buildings","calendars","Resource$Resources$Calendars","features","Resource$Resources$Features","rename","turnOff","Resource$Users$Aliases","photos","Resource$Users$Photos","makeAdmin","signOut","undelete","watch","generate","invalidate"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/admin/directory_v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.admin_directory_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar admin_directory_v1;\n(function (admin_directory_v1) {\n    /**\n     * Admin SDK API\n     *\n     * Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const admin = google.admin('directory_v1');\n     * ```\n     */\n    class Admin {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.asps = new Resource$Asps(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n            this.customer = new Resource$Customer(this.context);\n            this.customers = new Resource$Customers(this.context);\n            this.domainAliases = new Resource$Domainaliases(this.context);\n            this.domains = new Resource$Domains(this.context);\n            this.groups = new Resource$Groups(this.context);\n            this.members = new Resource$Members(this.context);\n            this.mobiledevices = new Resource$Mobiledevices(this.context);\n            this.orgunits = new Resource$Orgunits(this.context);\n            this.privileges = new Resource$Privileges(this.context);\n            this.resources = new Resource$Resources(this.context);\n            this.roleAssignments = new Resource$Roleassignments(this.context);\n            this.roles = new Resource$Roles(this.context);\n            this.schemas = new Resource$Schemas(this.context);\n            this.tokens = new Resource$Tokens(this.context);\n            this.twoStepVerification = new Resource$Twostepverification(this.context);\n            this.users = new Resource$Users(this.context);\n            this.verificationCodes = new Resource$Verificationcodes(this.context);\n        }\n    }\n    admin_directory_v1.Admin = Admin;\n    class Resource$Asps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Asps = Resource$Asps;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Channels = Resource$Channels;\n    class Resource$Chromeosdevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n    class Resource$Customer {\n        constructor(context) {\n            this.context = context;\n            this.devices = new Resource$Customer$Devices(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customer = Resource$Customer;\n    class Resource$Customer$Devices {\n        constructor(context) {\n            this.context = context;\n            this.chromeos = new Resource$Customer$Devices$Chromeos(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices = Resource$Customer$Devices;\n    class Resource$Customer$Devices$Chromeos {\n        constructor(context) {\n            this.context = context;\n            this.commands = new Resource$Customer$Devices$Chromeos$Commands(this.context);\n        }\n        issueCommand(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices$Chromeos = Resource$Customer$Devices$Chromeos;\n    class Resource$Customer$Devices$Chromeos$Commands {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId', 'commandId'],\n                pathParams: ['commandId', 'customerId', 'deviceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customer$Devices$Chromeos$Commands = Resource$Customer$Devices$Chromeos$Commands;\n    class Resource$Customers {\n        constructor(context) {\n            this.context = context;\n            this.chrome = new Resource$Customers$Chrome(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customers = Resource$Customers;\n    class Resource$Customers$Chrome {\n        constructor(context) {\n            this.context = context;\n            this.printers = new Resource$Customers$Chrome$Printers(this.context);\n            this.printServers = new Resource$Customers$Chrome$Printservers(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Customers$Chrome = Resource$Customers$Chrome;\n    class Resource$Customers$Chrome$Printers {\n        constructor(context) {\n            this.context = context;\n        }\n        batchCreatePrinters(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printers:batchCreatePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        batchDeletePrinters(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printers:batchDeletePrinters').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listPrinterModels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printers:listPrinterModels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customers$Chrome$Printers = Resource$Customers$Chrome$Printers;\n    class Resource$Customers$Chrome$Printservers {\n        constructor(context) {\n            this.context = context;\n        }\n        batchCreatePrintServers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printServers:batchCreatePrintServers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        batchDeletePrintServers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/{+parent}/chrome/printServers:batchDeletePrintServers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printServers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+parent}/chrome/printServers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customers$Chrome$Printservers = Resource$Customers$Chrome$Printservers;\n    class Resource$Domainaliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n    class Resource$Domains {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domains = Resource$Domains;\n    class Resource$Groups {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Groups$Aliases(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups = Resource$Groups;\n    class Resource$Groups$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'alias'],\n                pathParams: ['alias', 'groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n    class Resource$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        hasMember(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Members = Resource$Members;\n    class Resource$Mobiledevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n    class Resource$Orgunits {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n    class Resource$Privileges {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/ALL/privileges').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Privileges = Resource$Privileges;\n    class Resource$Resources {\n        constructor(context) {\n            this.context = context;\n            this.buildings = new Resource$Resources$Buildings(this.context);\n            this.calendars = new Resource$Resources$Calendars(this.context);\n            this.features = new Resource$Resources$Features(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Resources = Resource$Resources;\n    class Resource$Resources$Buildings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n    class Resource$Resources$Calendars {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n    class Resource$Resources$Features {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rename(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer', 'oldName'],\n                pathParams: ['customer', 'oldName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n    class Resource$Roleassignments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n    class Resource$Roles {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roles = Resource$Roles;\n    class Resource$Schemas {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Schemas = Resource$Schemas;\n    class Resource$Tokens {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Tokens = Resource$Tokens;\n    class Resource$Twostepverification {\n        constructor(context) {\n            this.context = context;\n        }\n        turnOff(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Twostepverification = Resource$Twostepverification;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Users$Aliases(this.context);\n            this.photos = new Resource$Users$Photos(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        signOut(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/signOut').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users = Resource$Users;\n    class Resource$Users$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey', 'alias'],\n                pathParams: ['alias', 'userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n    class Resource$Users$Photos {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n    class Resource$Verificationcodes {\n        constructor(context) {\n            this.context = context;\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        invalidate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://admin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 || (exports.admin_directory_v1 = admin_directory_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}