{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.androidpublisher_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar androidpublisher_v3;\n(function (androidpublisher_v3) {\n  /**\n   * Google Play Android Developer API\n   *\n   * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to &quot;insert&quot; an Edit, make changes as necessary, and then &quot;commit&quot; it.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const androidpublisher = google.androidpublisher('v3');\n   * ```\n   */\n  class Androidpublisher {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.applications = new Resource$Applications(this.context);\n      this.edits = new Resource$Edits(this.context);\n      this.externaltransactions = new Resource$Externaltransactions(this.context);\n      this.generatedapks = new Resource$Generatedapks(this.context);\n      this.grants = new Resource$Grants(this.context);\n      this.inappproducts = new Resource$Inappproducts(this.context);\n      this.internalappsharingartifacts = new Resource$Internalappsharingartifacts(this.context);\n      this.monetization = new Resource$Monetization(this.context);\n      this.orders = new Resource$Orders(this.context);\n      this.purchases = new Resource$Purchases(this.context);\n      this.reviews = new Resource$Reviews(this.context);\n      this.systemapks = new Resource$Systemapks(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n  }\n  androidpublisher_v3.Androidpublisher = Androidpublisher;\n  class Resource$Applications {\n    constructor(context) {\n      this.context = context;\n      this.deviceTierConfigs = new Resource$Applications$Devicetierconfigs(this.context);\n    }\n  }\n  androidpublisher_v3.Resource$Applications = Resource$Applications;\n  class Resource$Applications$Devicetierconfigs {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs/{deviceTierConfigId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'deviceTierConfigId'],\n        pathParams: ['deviceTierConfigId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Applications$Devicetierconfigs = Resource$Applications$Devicetierconfigs;\n  class Resource$Edits {\n    constructor(context) {\n      this.context = context;\n      this.apks = new Resource$Edits$Apks(this.context);\n      this.bundles = new Resource$Edits$Bundles(this.context);\n      this.countryavailability = new Resource$Edits$Countryavailability(this.context);\n      this.deobfuscationfiles = new Resource$Edits$Deobfuscationfiles(this.context);\n      this.details = new Resource$Edits$Details(this.context);\n      this.expansionfiles = new Resource$Edits$Expansionfiles(this.context);\n      this.images = new Resource$Edits$Images(this.context);\n      this.listings = new Resource$Edits$Listings(this.context);\n      this.testers = new Resource$Edits$Testers(this.context);\n      this.tracks = new Resource$Edits$Tracks(this.context);\n    }\n    commit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits = Resource$Edits;\n  class Resource$Edits$Apks {\n    constructor(context) {\n      this.context = context;\n    }\n    addexternallyhosted(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Apks = Resource$Edits$Apks;\n  class Resource$Edits$Bundles {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Bundles = Resource$Edits$Bundles;\n  class Resource$Edits$Countryavailability {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Countryavailability = Resource$Edits$Countryavailability;\n  class Resource$Edits$Deobfuscationfiles {\n    constructor(context) {\n      this.context = context;\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'deobfuscationFileType'],\n        pathParams: ['apkVersionCode', 'deobfuscationFileType', 'editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Deobfuscationfiles = Resource$Edits$Deobfuscationfiles;\n  class Resource$Edits$Details {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Details = Resource$Edits$Details;\n  class Resource$Edits$Expansionfiles {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Expansionfiles = Resource$Edits$Expansionfiles;\n  class Resource$Edits$Images {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType', 'imageId'],\n        pathParams: ['editId', 'imageId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteall(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Images = Resource$Edits$Images;\n  class Resource$Edits$Listings {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteall(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Listings = Resource$Edits$Listings;\n  class Resource$Edits$Testers {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Testers = Resource$Edits$Testers;\n  class Resource$Edits$Tracks {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Edits$Tracks = Resource$Edits$Tracks;\n  class Resource$Externaltransactions {\n    constructor(context) {\n      this.context = context;\n    }\n    createexternaltransaction(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+parent}/externalTransactions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getexternaltransaction(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    refundexternaltransaction(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Externaltransactions = Resource$Externaltransactions;\n  class Resource$Generatedapks {\n    constructor(context) {\n      this.context = context;\n    }\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}/downloads/{downloadId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode', 'downloadId'],\n        pathParams: ['downloadId', 'packageName', 'versionCode'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode'],\n        pathParams: ['packageName', 'versionCode'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Generatedapks = Resource$Generatedapks;\n  class Resource$Grants {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+parent}/grants').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Grants = Resource$Grants;\n  class Resource$Inappproducts {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Inappproducts = Resource$Inappproducts;\n  class Resource$Internalappsharingartifacts {\n    constructor(context) {\n      this.context = context;\n    }\n    uploadapk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    uploadbundle(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Internalappsharingartifacts = Resource$Internalappsharingartifacts;\n  class Resource$Monetization {\n    constructor(context) {\n      this.context = context;\n      this.subscriptions = new Resource$Monetization$Subscriptions(this.context);\n    }\n    convertRegionPrices(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Monetization = Resource$Monetization;\n  class Resource$Monetization$Subscriptions {\n    constructor(context) {\n      this.context = context;\n      this.basePlans = new Resource$Monetization$Subscriptions$Baseplans(this.context);\n    }\n    archive(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}:archive').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId'],\n        pathParams: ['packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId'],\n        pathParams: ['packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId'],\n        pathParams: ['packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId'],\n        pathParams: ['packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Monetization$Subscriptions = Resource$Monetization$Subscriptions;\n  class Resource$Monetization$Subscriptions$Baseplans {\n    constructor(context) {\n      this.context = context;\n      this.offers = new Resource$Monetization$Subscriptions$Baseplans$Offers(this.context);\n    }\n    activate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId'],\n        pathParams: ['basePlanId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deactivate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId'],\n        pathParams: ['basePlanId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId'],\n        pathParams: ['basePlanId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    migratePrices(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:migratePrices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId'],\n        pathParams: ['basePlanId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Monetization$Subscriptions$Baseplans = Resource$Monetization$Subscriptions$Baseplans;\n  class Resource$Monetization$Subscriptions$Baseplans$Offers {\n    constructor(context) {\n      this.context = context;\n    }\n    activate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n        pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId'],\n        pathParams: ['basePlanId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deactivate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n        pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n        pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n        pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId'],\n        pathParams: ['basePlanId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n        pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Monetization$Subscriptions$Baseplans$Offers = Resource$Monetization$Subscriptions$Baseplans$Offers;\n  class Resource$Orders {\n    constructor(context) {\n      this.context = context;\n    }\n    refund(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/orders/{orderId}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'orderId'],\n        pathParams: ['orderId', 'packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Orders = Resource$Orders;\n  class Resource$Purchases {\n    constructor(context) {\n      this.context = context;\n      this.products = new Resource$Purchases$Products(this.context);\n      this.subscriptions = new Resource$Purchases$Subscriptions(this.context);\n      this.subscriptionsv2 = new Resource$Purchases$Subscriptionsv2(this.context);\n      this.voidedpurchases = new Resource$Purchases$Voidedpurchases(this.context);\n    }\n  }\n  androidpublisher_v3.Resource$Purchases = Resource$Purchases;\n  class Resource$Purchases$Products {\n    constructor(context) {\n      this.context = context;\n    }\n    acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'token'],\n        pathParams: ['packageName', 'productId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    consume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:consume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'token'],\n        pathParams: ['packageName', 'productId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'token'],\n        pathParams: ['packageName', 'productId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Purchases$Products = Resource$Purchases$Products;\n  class Resource$Purchases$Subscriptions {\n    constructor(context) {\n      this.context = context;\n    }\n    acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    defer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    refund(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    revoke(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Purchases$Subscriptions = Resource$Purchases$Subscriptions;\n  class Resource$Purchases$Subscriptionsv2 {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/subscriptionsv2/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'token'],\n        pathParams: ['packageName', 'token'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Purchases$Subscriptionsv2 = Resource$Purchases$Subscriptionsv2;\n  class Resource$Purchases$Voidedpurchases {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Purchases$Voidedpurchases = Resource$Purchases$Voidedpurchases;\n  class Resource$Reviews {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/reviews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    reply(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Reviews = Resource$Reviews;\n  class Resource$Systemapks {\n    constructor(context) {\n      this.context = context;\n      this.variants = new Resource$Systemapks$Variants(this.context);\n    }\n  }\n  androidpublisher_v3.Resource$Systemapks = Resource$Systemapks;\n  class Resource$Systemapks$Variants {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode'],\n        pathParams: ['packageName', 'versionCode'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode', 'variantId'],\n        pathParams: ['packageName', 'variantId', 'versionCode'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode', 'variantId'],\n        pathParams: ['packageName', 'variantId', 'versionCode'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'versionCode'],\n        pathParams: ['packageName', 'versionCode'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Systemapks$Variants = Resource$Systemapks$Variants;\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  androidpublisher_v3.Resource$Users = Resource$Users;\n})(androidpublisher_v3 || (exports.androidpublisher_v3 = androidpublisher_v3 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","androidpublisher_v3","googleapis_common_1","require","Androidpublisher","constructor","options","google","context","_options","applications","Resource$Applications","edits","Resource$Edits","externaltransactions","Resource$Externaltransactions","generatedapks","Resource$Generatedapks","grants","Resource$Grants","inappproducts","Resource$Inappproducts","internalappsharingartifacts","Resource$Internalappsharingartifacts","monetization","Resource$Monetization","orders","Resource$Orders","purchases","Resource$Purchases","reviews","Resource$Reviews","systemapks","Resource$Systemapks","users","Resource$Users","deviceTierConfigs","Resource$Applications$Devicetierconfigs","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","apks","Resource$Edits$Apks","bundles","Resource$Edits$Bundles","countryavailability","Resource$Edits$Countryavailability","deobfuscationfiles","Resource$Edits$Deobfuscationfiles","details","Resource$Edits$Details","expansionfiles","Resource$Edits$Expansionfiles","images","Resource$Edits$Images","listings","Resource$Edits$Listings","testers","Resource$Edits$Testers","tracks","Resource$Edits$Tracks","commit","delete","insert","validate","addexternallyhosted","upload","mediaUrl","patch","update","deleteall","createexternaltransaction","getexternaltransaction","refundexternaltransaction","download","uploadapk","uploadbundle","subscriptions","Resource$Monetization$Subscriptions","convertRegionPrices","basePlans","Resource$Monetization$Subscriptions$Baseplans","archive","offers","Resource$Monetization$Subscriptions$Baseplans$Offers","activate","deactivate","migratePrices","refund","products","Resource$Purchases$Products","Resource$Purchases$Subscriptions","subscriptionsv2","Resource$Purchases$Subscriptionsv2","voidedpurchases","Resource$Purchases$Voidedpurchases","acknowledge","consume","cancel","defer","revoke","reply","variants","Resource$Systemapks$Variants"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/androidpublisher/v3.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.androidpublisher_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar androidpublisher_v3;\n(function (androidpublisher_v3) {\n    /**\n     * Google Play Android Developer API\n     *\n     * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to &quot;insert&quot; an Edit, make changes as necessary, and then &quot;commit&quot; it.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const androidpublisher = google.androidpublisher('v3');\n     * ```\n     */\n    class Androidpublisher {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.applications = new Resource$Applications(this.context);\n            this.edits = new Resource$Edits(this.context);\n            this.externaltransactions = new Resource$Externaltransactions(this.context);\n            this.generatedapks = new Resource$Generatedapks(this.context);\n            this.grants = new Resource$Grants(this.context);\n            this.inappproducts = new Resource$Inappproducts(this.context);\n            this.internalappsharingartifacts =\n                new Resource$Internalappsharingartifacts(this.context);\n            this.monetization = new Resource$Monetization(this.context);\n            this.orders = new Resource$Orders(this.context);\n            this.purchases = new Resource$Purchases(this.context);\n            this.reviews = new Resource$Reviews(this.context);\n            this.systemapks = new Resource$Systemapks(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    androidpublisher_v3.Androidpublisher = Androidpublisher;\n    class Resource$Applications {\n        constructor(context) {\n            this.context = context;\n            this.deviceTierConfigs = new Resource$Applications$Devicetierconfigs(this.context);\n        }\n    }\n    androidpublisher_v3.Resource$Applications = Resource$Applications;\n    class Resource$Applications$Devicetierconfigs {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs/{deviceTierConfigId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'deviceTierConfigId'],\n                pathParams: ['deviceTierConfigId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/deviceTierConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Applications$Devicetierconfigs = Resource$Applications$Devicetierconfigs;\n    class Resource$Edits {\n        constructor(context) {\n            this.context = context;\n            this.apks = new Resource$Edits$Apks(this.context);\n            this.bundles = new Resource$Edits$Bundles(this.context);\n            this.countryavailability = new Resource$Edits$Countryavailability(this.context);\n            this.deobfuscationfiles = new Resource$Edits$Deobfuscationfiles(this.context);\n            this.details = new Resource$Edits$Details(this.context);\n            this.expansionfiles = new Resource$Edits$Expansionfiles(this.context);\n            this.images = new Resource$Edits$Images(this.context);\n            this.listings = new Resource$Edits$Listings(this.context);\n            this.testers = new Resource$Edits$Testers(this.context);\n            this.tracks = new Resource$Edits$Tracks(this.context);\n        }\n        commit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/applications/{packageName}/edits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits = Resource$Edits;\n    class Resource$Edits$Apks {\n        constructor(context) {\n            this.context = context;\n        }\n        addexternallyhosted(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Apks = Resource$Edits$Apks;\n    class Resource$Edits$Bundles {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Bundles = Resource$Edits$Bundles;\n    class Resource$Edits$Countryavailability {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Countryavailability = Resource$Edits$Countryavailability;\n    class Resource$Edits$Deobfuscationfiles {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'deobfuscationFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'deobfuscationFileType',\n                    'editId',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Deobfuscationfiles = Resource$Edits$Deobfuscationfiles;\n    class Resource$Edits$Details {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Details = Resource$Edits$Details;\n    class Resource$Edits$Expansionfiles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'apkVersionCode',\n                    'expansionFileType',\n                ],\n                pathParams: [\n                    'apkVersionCode',\n                    'editId',\n                    'expansionFileType',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Expansionfiles = Resource$Edits$Expansionfiles;\n    class Resource$Edits$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'packageName',\n                    'editId',\n                    'language',\n                    'imageType',\n                    'imageId',\n                ],\n                pathParams: [\n                    'editId',\n                    'imageId',\n                    'imageType',\n                    'language',\n                    'packageName',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteall(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Images = Resource$Edits$Images;\n    class Resource$Edits$Listings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteall(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Listings = Resource$Edits$Listings;\n    class Resource$Edits$Testers {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Testers = Resource$Edits$Testers;\n    class Resource$Edits$Tracks {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Edits$Tracks = Resource$Edits$Tracks;\n    class Resource$Externaltransactions {\n        constructor(context) {\n            this.context = context;\n        }\n        createexternaltransaction(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+parent}/externalTransactions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getexternaltransaction(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        refundexternaltransaction(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Externaltransactions = Resource$Externaltransactions;\n    class Resource$Generatedapks {\n        constructor(context) {\n            this.context = context;\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}/downloads/{downloadId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode', 'downloadId'],\n                pathParams: ['downloadId', 'packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode'],\n                pathParams: ['packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Generatedapks = Resource$Generatedapks;\n    class Resource$Grants {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+parent}/grants').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Grants = Resource$Grants;\n    class Resource$Inappproducts {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Inappproducts = Resource$Inappproducts;\n    class Resource$Internalappsharingartifacts {\n        constructor(context) {\n            this.context = context;\n        }\n        uploadapk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        uploadbundle(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Internalappsharingartifacts = Resource$Internalappsharingartifacts;\n    class Resource$Monetization {\n        constructor(context) {\n            this.context = context;\n            this.subscriptions = new Resource$Monetization$Subscriptions(this.context);\n        }\n        convertRegionPrices(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Monetization = Resource$Monetization;\n    class Resource$Monetization$Subscriptions {\n        constructor(context) {\n            this.context = context;\n            this.basePlans = new Resource$Monetization$Subscriptions$Baseplans(this.context);\n        }\n        archive(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}:archive').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId'],\n                pathParams: ['packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId'],\n                pathParams: ['packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId'],\n                pathParams: ['packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId'],\n                pathParams: ['packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Monetization$Subscriptions = Resource$Monetization$Subscriptions;\n    class Resource$Monetization$Subscriptions$Baseplans {\n        constructor(context) {\n            this.context = context;\n            this.offers = new Resource$Monetization$Subscriptions$Baseplans$Offers(this.context);\n        }\n        activate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId'],\n                pathParams: ['basePlanId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deactivate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId'],\n                pathParams: ['basePlanId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId'],\n                pathParams: ['basePlanId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        migratePrices(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:migratePrices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId'],\n                pathParams: ['basePlanId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Monetization$Subscriptions$Baseplans = Resource$Monetization$Subscriptions$Baseplans;\n    class Resource$Monetization$Subscriptions$Baseplans$Offers {\n        constructor(context) {\n            this.context = context;\n        }\n        activate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n                pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId'],\n                pathParams: ['basePlanId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deactivate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n                pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n                pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n                pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId'],\n                pathParams: ['basePlanId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'basePlanId', 'offerId'],\n                pathParams: ['basePlanId', 'offerId', 'packageName', 'productId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Monetization$Subscriptions$Baseplans$Offers = Resource$Monetization$Subscriptions$Baseplans$Offers;\n    class Resource$Orders {\n        constructor(context) {\n            this.context = context;\n        }\n        refund(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/orders/{orderId}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'orderId'],\n                pathParams: ['orderId', 'packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Orders = Resource$Orders;\n    class Resource$Purchases {\n        constructor(context) {\n            this.context = context;\n            this.products = new Resource$Purchases$Products(this.context);\n            this.subscriptions = new Resource$Purchases$Subscriptions(this.context);\n            this.subscriptionsv2 = new Resource$Purchases$Subscriptionsv2(this.context);\n            this.voidedpurchases = new Resource$Purchases$Voidedpurchases(this.context);\n        }\n    }\n    androidpublisher_v3.Resource$Purchases = Resource$Purchases;\n    class Resource$Purchases$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'token'],\n                pathParams: ['packageName', 'productId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        consume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:consume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'token'],\n                pathParams: ['packageName', 'productId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'token'],\n                pathParams: ['packageName', 'productId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Purchases$Products = Resource$Purchases$Products;\n    class Resource$Purchases$Subscriptions {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        defer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        refund(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        revoke(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Purchases$Subscriptions = Resource$Purchases$Subscriptions;\n    class Resource$Purchases$Subscriptionsv2 {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/subscriptionsv2/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'token'],\n                pathParams: ['packageName', 'token'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Purchases$Subscriptionsv2 = Resource$Purchases$Subscriptionsv2;\n    class Resource$Purchases$Voidedpurchases {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Purchases$Voidedpurchases = Resource$Purchases$Voidedpurchases;\n    class Resource$Reviews {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'reviewId'],\n                pathParams: ['packageName', 'reviewId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/reviews').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reply(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'reviewId'],\n                pathParams: ['packageName', 'reviewId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Reviews = Resource$Reviews;\n    class Resource$Systemapks {\n        constructor(context) {\n            this.context = context;\n            this.variants = new Resource$Systemapks$Variants(this.context);\n        }\n    }\n    androidpublisher_v3.Resource$Systemapks = Resource$Systemapks;\n    class Resource$Systemapks$Variants {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode'],\n                pathParams: ['packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}:download').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode', 'variantId'],\n                pathParams: ['packageName', 'variantId', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode', 'variantId'],\n                pathParams: ['packageName', 'variantId', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['packageName', 'versionCode'],\n                pathParams: ['packageName', 'versionCode'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Systemapks$Variants = Resource$Systemapks$Variants;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+parent}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://androidpublisher.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidpublisher/v3/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    androidpublisher_v3.Resource$Users = Resource$Users;\n})(androidpublisher_v3 || (exports.androidpublisher_v3 = androidpublisher_v3 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}