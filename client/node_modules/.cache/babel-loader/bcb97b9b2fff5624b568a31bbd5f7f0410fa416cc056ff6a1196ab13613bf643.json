{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bigquery_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar bigquery_v2;\n(function (bigquery_v2) {\n  /**\n   * BigQuery API\n   *\n   * A data platform for customers to create, manage, share and query data.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const bigquery = google.bigquery('v2');\n   * ```\n   */\n  class Bigquery {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.datasets = new Resource$Datasets(this.context);\n      this.jobs = new Resource$Jobs(this.context);\n      this.models = new Resource$Models(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.routines = new Resource$Routines(this.context);\n      this.rowAccessPolicies = new Resource$Rowaccesspolicies(this.context);\n      this.tabledata = new Resource$Tabledata(this.context);\n      this.tables = new Resource$Tables(this.context);\n    }\n  }\n  bigquery_v2.Bigquery = Bigquery;\n  class Resource$Datasets {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Datasets = Resource$Datasets;\n  class Resource$Jobs {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs/{jobId}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/jobs/{+jobId}/delete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getQueryResults(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/queries/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    query(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/queries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Jobs = Resource$Jobs;\n  class Resource$Models {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'modelId'],\n        pathParams: ['datasetId', 'modelId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'modelId'],\n        pathParams: ['datasetId', 'modelId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'modelId'],\n        pathParams: ['datasetId', 'modelId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Models = Resource$Models;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n    getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Projects = Resource$Projects;\n  class Resource$Routines {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'routineId'],\n        pathParams: ['datasetId', 'projectId', 'routineId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'routineId'],\n        pathParams: ['datasetId', 'projectId', 'routineId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'routineId'],\n        pathParams: ['datasetId', 'projectId', 'routineId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Routines = Resource$Routines;\n  class Resource$Rowaccesspolicies {\n    constructor(context) {\n      this.context = context;\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Rowaccesspolicies = Resource$Rowaccesspolicies;\n  class Resource$Tabledata {\n    constructor(context) {\n      this.context = context;\n    }\n    insertAll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Tabledata = Resource$Tabledata;\n  class Resource$Tables {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  bigquery_v2.Resource$Tables = Resource$Tables;\n})(bigquery_v2 || (exports.bigquery_v2 = bigquery_v2 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","bigquery_v2","googleapis_common_1","require","Bigquery","constructor","options","google","context","_options","datasets","Resource$Datasets","jobs","Resource$Jobs","models","Resource$Models","projects","Resource$Projects","routines","Resource$Routines","rowAccessPolicies","Resource$Rowaccesspolicies","tabledata","Resource$Tabledata","tables","Resource$Tables","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","insert","list","patch","update","cancel","getQueryResults","mediaUrl","query","getServiceAccount","getIamPolicy","testIamPermissions","insertAll","setIamPolicy"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/bigquery/v2.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bigquery_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar bigquery_v2;\n(function (bigquery_v2) {\n    /**\n     * BigQuery API\n     *\n     * A data platform for customers to create, manage, share and query data.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const bigquery = google.bigquery('v2');\n     * ```\n     */\n    class Bigquery {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.datasets = new Resource$Datasets(this.context);\n            this.jobs = new Resource$Jobs(this.context);\n            this.models = new Resource$Models(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.routines = new Resource$Routines(this.context);\n            this.rowAccessPolicies = new Resource$Rowaccesspolicies(this.context);\n            this.tabledata = new Resource$Tabledata(this.context);\n            this.tables = new Resource$Tables(this.context);\n        }\n    }\n    bigquery_v2.Bigquery = Bigquery;\n    class Resource$Datasets {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Datasets = Resource$Datasets;\n    class Resource$Jobs {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs/{jobId}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/jobs/{+jobId}/delete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getQueryResults(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/queries/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        query(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/queries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Jobs = Resource$Jobs;\n    class Resource$Models {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'modelId'],\n                pathParams: ['datasetId', 'modelId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'modelId'],\n                pathParams: ['datasetId', 'modelId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'modelId'],\n                pathParams: ['datasetId', 'modelId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Models = Resource$Models;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Projects = Resource$Projects;\n    class Resource$Routines {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'routineId'],\n                pathParams: ['datasetId', 'projectId', 'routineId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'routineId'],\n                pathParams: ['datasetId', 'projectId', 'routineId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/routines/{+routineId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'routineId'],\n                pathParams: ['datasetId', 'projectId', 'routineId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Routines = Resource$Routines;\n    class Resource$Rowaccesspolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/tables/{+tableId}/rowAccessPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Rowaccesspolicies = Resource$Rowaccesspolicies;\n    class Resource$Tabledata {\n        constructor(context) {\n            this.context = context;\n        }\n        insertAll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Tabledata = Resource$Tabledata;\n    class Resource$Tables {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://bigquery.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Tables = Resource$Tables;\n})(bigquery_v2 || (exports.bigquery_v2 = bigquery_v2 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}