{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.displayvideo_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar displayvideo_v2;\n(function (displayvideo_v2) {\n  /**\n   * Display &amp; Video 360 API\n   *\n   * Display &amp; Video 360 API allows users to automate complex Display &amp; Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const displayvideo = google.displayvideo('v2');\n   * ```\n   */\n  class Displayvideo {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.advertisers = new Resource$Advertisers(this.context);\n      this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n      this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n      this.customLists = new Resource$Customlists(this.context);\n      this.firstAndThirdPartyAudiences = new Resource$Firstandthirdpartyaudiences(this.context);\n      this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n      this.googleAudiences = new Resource$Googleaudiences(this.context);\n      this.guaranteedOrders = new Resource$Guaranteedorders(this.context);\n      this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n      this.inventorySources = new Resource$Inventorysources(this.context);\n      this.media = new Resource$Media(this.context);\n      this.partners = new Resource$Partners(this.context);\n      this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n      this.targetingTypes = new Resource$Targetingtypes(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n  }\n  displayvideo_v2.Displayvideo = Displayvideo;\n  class Resource$Advertisers {\n    constructor(context) {\n      this.context = context;\n      this.assets = new Resource$Advertisers$Assets(this.context);\n      this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n      this.channels = new Resource$Advertisers$Channels(this.context);\n      this.creatives = new Resource$Advertisers$Creatives(this.context);\n      this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n      this.invoices = new Resource$Advertisers$Invoices(this.context);\n      this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n      this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n      this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n      this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n      this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n      this.youtubeAdGroupAds = new Resource$Advertisers$Youtubeadgroupads(this.context);\n      this.youtubeAdGroups = new Resource$Advertisers$Youtubeadgroups(this.context);\n    }\n    audit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers = Resource$Advertisers;\n  class Resource$Advertisers$Assets {\n    constructor(context) {\n      this.context = context;\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n  class Resource$Advertisers$Campaigns {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Campaigns$Targetingtypes(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n  class Resource$Advertisers$Campaigns$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes = Resource$Advertisers$Campaigns$Targetingtypes;\n  class Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'campaignId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId', 'targetingType'],\n        pathParams: ['advertiserId', 'campaignId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Advertisers$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n  class Resource$Advertisers$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n  class Resource$Advertisers$Creatives {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n  class Resource$Advertisers$Insertionorders {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Insertionorders$Targetingtypes(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n  class Resource$Advertisers$Insertionorders$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes = Resource$Advertisers$Insertionorders$Targetingtypes;\n  class Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n        pathParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'insertionOrderId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'insertionOrderId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n        pathParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Advertisers$Invoices {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    lookupInvoiceCurrency(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices:lookupInvoiceCurrency').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Invoices = Resource$Advertisers$Invoices;\n  class Resource$Advertisers$Lineitems {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n    }\n    bulkEditAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkEditAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    bulkListAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkListAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    bulkUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    duplicate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}:duplicate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateDefault(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:generateDefault').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n  class Resource$Advertisers$Lineitems$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n  class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Advertisers$Locationlists {\n    constructor(context) {\n      this.context = context;\n      this.assignedLocations = new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n  class Resource$Advertisers$Locationlists$Assignedlocations {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId', 'assignedLocationId'],\n        pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n  class Resource$Advertisers$Manualtriggers {\n    constructor(context) {\n      this.context = context;\n    }\n    activate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deactivate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n  class Resource$Advertisers$Negativekeywordlists {\n    constructor(context) {\n      this.context = context;\n      this.negativeKeywords = new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n  class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId', 'keywordValue'],\n        pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n  class Resource$Advertisers$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n  class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Advertisers$Youtubeadgroupads {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds/{+youtubeAdGroupAdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupAdId'],\n        pathParams: ['advertiserId', 'youtubeAdGroupAdId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroupads = Resource$Advertisers$Youtubeadgroupads;\n  class Resource$Advertisers$Youtubeadgroups {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Youtubeadgroups$Targetingtypes(this.context);\n    }\n    bulkListAdGroupAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups:bulkListAdGroupAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupId'],\n        pathParams: ['advertiserId', 'youtubeAdGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroups = Resource$Advertisers$Youtubeadgroups;\n  class Resource$Advertisers$Youtubeadgroups$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes = Resource$Advertisers$Youtubeadgroups$Targetingtypes;\n  class Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType', 'youtubeAdGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType', 'youtubeAdGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Combinedaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['combinedAudienceId'],\n        pathParams: ['combinedAudienceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Combinedaudiences = Resource$Combinedaudiences;\n  class Resource$Custombiddingalgorithms {\n    constructor(context) {\n      this.context = context;\n      this.scripts = new Resource$Custombiddingalgorithms$Scripts(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    uploadScript(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}:uploadScript').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n  class Resource$Custombiddingalgorithms$Scripts {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts/{+customBiddingScriptId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n        pathParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Custombiddingalgorithms$Scripts = Resource$Custombiddingalgorithms$Scripts;\n  class Resource$Customlists {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['customListId'],\n        pathParams: ['customListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Customlists = Resource$Customlists;\n  class Resource$Firstandthirdpartyaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    editCustomerMatchMembers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}:editCustomerMatchMembers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['firstAndThirdPartyAudienceId'],\n        pathParams: ['firstAndThirdPartyAudienceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['firstAndThirdPartyAudienceId'],\n        pathParams: ['firstAndThirdPartyAudienceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['firstAndThirdPartyAudienceId'],\n        pathParams: ['firstAndThirdPartyAudienceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Firstandthirdpartyaudiences = Resource$Firstandthirdpartyaudiences;\n  class Resource$Floodlightgroups {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Floodlightgroups = Resource$Floodlightgroups;\n  class Resource$Googleaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['googleAudienceId'],\n        pathParams: ['googleAudienceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Googleaudiences = Resource$Googleaudiences;\n  class Resource$Guaranteedorders {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    editGuaranteedOrderReadAccessors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}:editGuaranteedOrderReadAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Guaranteedorders = Resource$Guaranteedorders;\n  class Resource$Inventorysourcegroups {\n    constructor(context) {\n      this.context = context;\n      this.assignedInventorySources = new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n  class Resource$Inventorysourcegroups$Assignedinventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n        pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n  class Resource$Inventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    editInventorySourceReadWriteAccessors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}:editInventorySourceReadWriteAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Inventorysources = Resource$Inventorysources;\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Media = Resource$Media;\n  class Resource$Partners {\n    constructor(context) {\n      this.context = context;\n      this.channels = new Resource$Partners$Channels(this.context);\n      this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n    }\n    editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners = Resource$Partners;\n  class Resource$Partners$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Partners$Channels$Sites(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners$Channels = Resource$Partners$Channels;\n  class Resource$Partners$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n        pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n  class Resource$Partners$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n  class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Sdfdownloadtasks {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n  class Resource$Sdfdownloadtasks$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n  class Resource$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Targetingtypes = Resource$Targetingtypes;\n  class Resource$Targetingtypes$Targetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['targetingType', 'targetingOptionId'],\n        pathParams: ['targetingOptionId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['targetingType'],\n        pathParams: ['targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions:search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['targetingType'],\n        pathParams: ['targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Users = Resource$Users;\n})(displayvideo_v2 || (exports.displayvideo_v2 = displayvideo_v2 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","displayvideo_v2","googleapis_common_1","require","Displayvideo","constructor","options","google","context","_options","advertisers","Resource$Advertisers","combinedAudiences","Resource$Combinedaudiences","customBiddingAlgorithms","Resource$Custombiddingalgorithms","customLists","Resource$Customlists","firstAndThirdPartyAudiences","Resource$Firstandthirdpartyaudiences","floodlightGroups","Resource$Floodlightgroups","googleAudiences","Resource$Googleaudiences","guaranteedOrders","Resource$Guaranteedorders","inventorySourceGroups","Resource$Inventorysourcegroups","inventorySources","Resource$Inventorysources","media","Resource$Media","partners","Resource$Partners","sdfdownloadtasks","Resource$Sdfdownloadtasks","targetingTypes","Resource$Targetingtypes","users","Resource$Users","assets","Resource$Advertisers$Assets","campaigns","Resource$Advertisers$Campaigns","channels","Resource$Advertisers$Channels","creatives","Resource$Advertisers$Creatives","insertionOrders","Resource$Advertisers$Insertionorders","invoices","Resource$Advertisers$Invoices","lineItems","Resource$Advertisers$Lineitems","locationLists","Resource$Advertisers$Locationlists","manualTriggers","Resource$Advertisers$Manualtriggers","negativeKeywordLists","Resource$Advertisers$Negativekeywordlists","Resource$Advertisers$Targetingtypes","youtubeAdGroupAds","Resource$Advertisers$Youtubeadgroupads","youtubeAdGroups","Resource$Advertisers$Youtubeadgroups","audit","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","create","delete","editAssignedTargetingOptions","get","list","listAssignedTargetingOptions","patch","upload","mediaUrl","Resource$Advertisers$Campaigns$Targetingtypes","assignedTargetingOptions","Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions","sites","Resource$Advertisers$Channels$Sites","bulkEdit","Resource$Advertisers$Insertionorders$Targetingtypes","Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions","lookupInvoiceCurrency","Resource$Advertisers$Lineitems$Targetingtypes","bulkEditAssignedTargetingOptions","bulkListAssignedTargetingOptions","bulkUpdate","duplicate","generateDefault","Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions","assignedLocations","Resource$Advertisers$Locationlists$Assignedlocations","activate","deactivate","negativeKeywords","Resource$Advertisers$Negativekeywordlists$Negativekeywords","Resource$Advertisers$Targetingtypes$Assignedtargetingoptions","Resource$Advertisers$Youtubeadgroups$Targetingtypes","bulkListAdGroupAssignedTargetingOptions","Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions","scripts","Resource$Custombiddingalgorithms$Scripts","uploadScript","editCustomerMatchMembers","editGuaranteedOrderReadAccessors","assignedInventorySources","Resource$Inventorysourcegroups$Assignedinventorysources","editInventorySourceReadWriteAccessors","download","Resource$Partners$Channels","Resource$Partners$Targetingtypes","Resource$Partners$Channels$Sites","Resource$Partners$Targetingtypes$Assignedtargetingoptions","operations","Resource$Sdfdownloadtasks$Operations","targetingOptions","Resource$Targetingtypes$Targetingoptions","search","bulkEditAssignedUserRoles"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/displayvideo/v2.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.displayvideo_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar displayvideo_v2;\n(function (displayvideo_v2) {\n    /**\n     * Display &amp; Video 360 API\n     *\n     * Display &amp; Video 360 API allows users to automate complex Display &amp; Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const displayvideo = google.displayvideo('v2');\n     * ```\n     */\n    class Displayvideo {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.advertisers = new Resource$Advertisers(this.context);\n            this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n            this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n            this.customLists = new Resource$Customlists(this.context);\n            this.firstAndThirdPartyAudiences =\n                new Resource$Firstandthirdpartyaudiences(this.context);\n            this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n            this.googleAudiences = new Resource$Googleaudiences(this.context);\n            this.guaranteedOrders = new Resource$Guaranteedorders(this.context);\n            this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n            this.inventorySources = new Resource$Inventorysources(this.context);\n            this.media = new Resource$Media(this.context);\n            this.partners = new Resource$Partners(this.context);\n            this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n            this.targetingTypes = new Resource$Targetingtypes(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    displayvideo_v2.Displayvideo = Displayvideo;\n    class Resource$Advertisers {\n        constructor(context) {\n            this.context = context;\n            this.assets = new Resource$Advertisers$Assets(this.context);\n            this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n            this.channels = new Resource$Advertisers$Channels(this.context);\n            this.creatives = new Resource$Advertisers$Creatives(this.context);\n            this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n            this.invoices = new Resource$Advertisers$Invoices(this.context);\n            this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n            this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n            this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n            this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n            this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n            this.youtubeAdGroupAds = new Resource$Advertisers$Youtubeadgroupads(this.context);\n            this.youtubeAdGroups = new Resource$Advertisers$Youtubeadgroups(this.context);\n        }\n        audit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers = Resource$Advertisers;\n    class Resource$Advertisers$Assets {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n    class Resource$Advertisers$Campaigns {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes = new Resource$Advertisers$Campaigns$Targetingtypes(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n    class Resource$Advertisers$Campaigns$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes = Resource$Advertisers$Campaigns$Targetingtypes;\n    class Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'campaignId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'campaignId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId', 'targetingType'],\n                pathParams: ['advertiserId', 'campaignId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Campaigns$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n    class Resource$Advertisers$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n    class Resource$Advertisers$Creatives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n    class Resource$Advertisers$Insertionorders {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes =\n                new Resource$Advertisers$Insertionorders$Targetingtypes(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n    class Resource$Advertisers$Insertionorders$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes = Resource$Advertisers$Insertionorders$Targetingtypes;\n    class Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n                pathParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'insertionOrderId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'insertionOrderId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'insertionOrderId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'insertionOrderId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n                pathParams: ['advertiserId', 'insertionOrderId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Insertionorders$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Invoices {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        lookupInvoiceCurrency(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/invoices:lookupInvoiceCurrency').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Invoices = Resource$Advertisers$Invoices;\n    class Resource$Advertisers$Lineitems {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n        }\n        bulkEditAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:bulkEditAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkListAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:bulkListAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        duplicate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}:duplicate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateDefault(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:generateDefault').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n    class Resource$Advertisers$Lineitems$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n    class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Locationlists {\n        constructor(context) {\n            this.context = context;\n            this.assignedLocations =\n                new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n    class Resource$Advertisers$Locationlists$Assignedlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'locationListId',\n                    'assignedLocationId',\n                ],\n                pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n    class Resource$Advertisers$Manualtriggers {\n        constructor(context) {\n            this.context = context;\n        }\n        activate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deactivate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n    class Resource$Advertisers$Negativekeywordlists {\n        constructor(context) {\n            this.context = context;\n            this.negativeKeywords =\n                new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n    class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'negativeKeywordListId',\n                    'keywordValue',\n                ],\n                pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n    class Resource$Advertisers$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n    class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Youtubeadgroupads {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds/{+youtubeAdGroupAdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'youtubeAdGroupAdId'],\n                pathParams: ['advertiserId', 'youtubeAdGroupAdId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroupads = Resource$Advertisers$Youtubeadgroupads;\n    class Resource$Advertisers$Youtubeadgroups {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes =\n                new Resource$Advertisers$Youtubeadgroups$Targetingtypes(this.context);\n        }\n        bulkListAdGroupAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups:bulkListAdGroupAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'youtubeAdGroupId'],\n                pathParams: ['advertiserId', 'youtubeAdGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroups = Resource$Advertisers$Youtubeadgroups;\n    class Resource$Advertisers$Youtubeadgroups$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes = Resource$Advertisers$Youtubeadgroups$Targetingtypes;\n    class Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'youtubeAdGroupId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                    'youtubeAdGroupId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'youtubeAdGroupId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType', 'youtubeAdGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Combinedaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['combinedAudienceId'],\n                pathParams: ['combinedAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Combinedaudiences = Resource$Combinedaudiences;\n    class Resource$Custombiddingalgorithms {\n        constructor(context) {\n            this.context = context;\n            this.scripts = new Resource$Custombiddingalgorithms$Scripts(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        uploadScript(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}:uploadScript').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n    class Resource$Custombiddingalgorithms$Scripts {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts/{+customBiddingScriptId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n                pathParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Custombiddingalgorithms$Scripts = Resource$Custombiddingalgorithms$Scripts;\n    class Resource$Customlists {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['customListId'],\n                pathParams: ['customListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Customlists = Resource$Customlists;\n    class Resource$Firstandthirdpartyaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editCustomerMatchMembers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}:editCustomerMatchMembers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['firstAndThirdPartyAudienceId'],\n                pathParams: ['firstAndThirdPartyAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['firstAndThirdPartyAudienceId'],\n                pathParams: ['firstAndThirdPartyAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/firstAndThirdPartyAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/firstAndThirdPartyAudiences/{+firstAndThirdPartyAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['firstAndThirdPartyAudienceId'],\n                pathParams: ['firstAndThirdPartyAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Firstandthirdpartyaudiences = Resource$Firstandthirdpartyaudiences;\n    class Resource$Floodlightgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Floodlightgroups = Resource$Floodlightgroups;\n    class Resource$Googleaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['googleAudienceId'],\n                pathParams: ['googleAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Googleaudiences = Resource$Googleaudiences;\n    class Resource$Guaranteedorders {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editGuaranteedOrderReadAccessors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/guaranteedOrders/{+guaranteedOrderId}:editGuaranteedOrderReadAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Guaranteedorders = Resource$Guaranteedorders;\n    class Resource$Inventorysourcegroups {\n        constructor(context) {\n            this.context = context;\n            this.assignedInventorySources =\n                new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n    class Resource$Inventorysourcegroups$Assignedinventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n                pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n    class Resource$Inventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editInventorySourceReadWriteAccessors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySources/{+inventorySourceId}:editInventorySourceReadWriteAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysources = Resource$Inventorysources;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Media = Resource$Media;\n    class Resource$Partners {\n        constructor(context) {\n            this.context = context;\n            this.channels = new Resource$Partners$Channels(this.context);\n            this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n        }\n        editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners = Resource$Partners;\n    class Resource$Partners$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Partners$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Channels = Resource$Partners$Channels;\n    class Resource$Partners$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n                pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n    class Resource$Partners$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n    class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Sdfdownloadtasks {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n    class Resource$Sdfdownloadtasks$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n    class Resource$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Targetingtypes = Resource$Targetingtypes;\n    class Resource$Targetingtypes$Targetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['targetingType', 'targetingOptionId'],\n                pathParams: ['targetingOptionId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['targetingType'],\n                pathParams: ['targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/targetingTypes/{+targetingType}/targetingOptions:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['targetingType'],\n                pathParams: ['targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Users = Resource$Users;\n})(displayvideo_v2 || (exports.displayvideo_v2 = displayvideo_v2 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}