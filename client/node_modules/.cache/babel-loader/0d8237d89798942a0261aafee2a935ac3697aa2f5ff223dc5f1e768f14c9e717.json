{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.books_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar books_v1;\n(function (books_v1) {\n  /**\n   * Books API\n   *\n   * The Google Books API allows clients to access the Google Books repository.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const books = google.books('v1');\n   * ```\n   */\n  class Books {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.bookshelves = new Resource$Bookshelves(this.context);\n      this.cloudloading = new Resource$Cloudloading(this.context);\n      this.dictionary = new Resource$Dictionary(this.context);\n      this.familysharing = new Resource$Familysharing(this.context);\n      this.layers = new Resource$Layers(this.context);\n      this.myconfig = new Resource$Myconfig(this.context);\n      this.mylibrary = new Resource$Mylibrary(this.context);\n      this.notification = new Resource$Notification(this.context);\n      this.onboarding = new Resource$Onboarding(this.context);\n      this.personalizedstream = new Resource$Personalizedstream(this.context);\n      this.promooffer = new Resource$Promooffer(this.context);\n      this.series = new Resource$Series(this.context);\n      this.volumes = new Resource$Volumes(this.context);\n    }\n  }\n  books_v1.Books = Books;\n  class Resource$Bookshelves {\n    constructor(context) {\n      this.context = context;\n      this.volumes = new Resource$Bookshelves$Volumes(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'shelf'],\n        pathParams: ['shelf', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Bookshelves = Resource$Bookshelves;\n  class Resource$Bookshelves$Volumes {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'shelf'],\n        pathParams: ['shelf', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n  class Resource$Cloudloading {\n    constructor(context) {\n      this.context = context;\n    }\n    addBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Cloudloading = Resource$Cloudloading;\n  class Resource$Dictionary {\n    constructor(context) {\n      this.context = context;\n    }\n    listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['cpksver'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Dictionary = Resource$Dictionary;\n  class Resource$Familysharing {\n    constructor(context) {\n      this.context = context;\n    }\n    getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    share(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unshare(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Familysharing = Resource$Familysharing;\n  class Resource$Layers {\n    constructor(context) {\n      this.context = context;\n      this.annotationData = new Resource$Layers$Annotationdata(this.context);\n      this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'summaryId'],\n        pathParams: ['summaryId', 'volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Layers = Resource$Layers;\n  class Resource$Layers$Annotationdata {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'annotationDataId', 'contentVersion'],\n        pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n        pathParams: ['layerId', 'volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n  class Resource$Layers$Volumeannotations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'annotationId'],\n        pathParams: ['annotationId', 'layerId', 'volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n        pathParams: ['layerId', 'volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n  class Resource$Myconfig {\n    constructor(context) {\n      this.context = context;\n    }\n    getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['cpksver', 'volumeIds'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['cpksver', 'nonce', 'source'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Myconfig = Resource$Myconfig;\n  class Resource$Mylibrary {\n    constructor(context) {\n      this.context = context;\n      this.annotations = new Resource$Mylibrary$Annotations(this.context);\n      this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n      this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n    }\n  }\n  books_v1.Resource$Mylibrary = Resource$Mylibrary;\n  class Resource$Mylibrary$Annotations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    summary(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['layerIds', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n  class Resource$Mylibrary$Bookshelves {\n    constructor(context) {\n      this.context = context;\n      this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n    }\n    addVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n  class Resource$Mylibrary$Bookshelves$Volumes {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n  class Resource$Mylibrary$Readingpositions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setPosition(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'position', 'timestamp'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n  class Resource$Notification {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['notification_id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Notification = Resource$Notification;\n  class Resource$Onboarding {\n    constructor(context) {\n      this.context = context;\n    }\n    listCategories(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Onboarding = Resource$Onboarding;\n  class Resource$Personalizedstream {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n  class Resource$Promooffer {\n    constructor(context) {\n      this.context = context;\n    }\n    accept(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    dismiss(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Promooffer = Resource$Promooffer;\n  class Resource$Series {\n    constructor(context) {\n      this.context = context;\n      this.membership = new Resource$Series$Membership(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['series_id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Series = Resource$Series;\n  class Resource$Series$Membership {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['series_id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Series$Membership = Resource$Series$Membership;\n  class Resource$Volumes {\n    constructor(context) {\n      this.context = context;\n      this.associated = new Resource$Volumes$Associated(this.context);\n      this.mybooks = new Resource$Volumes$Mybooks(this.context);\n      this.recommended = new Resource$Volumes$Recommended(this.context);\n      this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['q'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Volumes = Resource$Volumes;\n  class Resource$Volumes$Associated {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n  class Resource$Volumes$Mybooks {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n  class Resource$Volumes$Recommended {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['rating', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n  class Resource$Volumes$Useruploaded {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 || (exports.books_v1 = books_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","books_v1","googleapis_common_1","require","Books","constructor","options","google","context","_options","bookshelves","Resource$Bookshelves","cloudloading","Resource$Cloudloading","dictionary","Resource$Dictionary","familysharing","Resource$Familysharing","layers","Resource$Layers","myconfig","Resource$Myconfig","mylibrary","Resource$Mylibrary","notification","Resource$Notification","onboarding","Resource$Onboarding","personalizedstream","Resource$Personalizedstream","promooffer","Resource$Promooffer","series","Resource$Series","volumes","Resource$Volumes","Resource$Bookshelves$Volumes","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","addBook","deleteBook","updateBook","listOfflineMetadata","getFamilyInfo","share","unshare","annotationData","Resource$Layers$Annotationdata","volumeAnnotations","Resource$Layers$Volumeannotations","getUserSettings","releaseDownloadAccess","requestAccess","syncVolumeLicenses","updateUserSettings","annotations","Resource$Mylibrary$Annotations","Resource$Mylibrary$Bookshelves","readingpositions","Resource$Mylibrary$Readingpositions","delete","insert","summary","update","Resource$Mylibrary$Bookshelves$Volumes","addVolume","clearVolumes","moveVolume","removeVolume","setPosition","listCategories","listCategoryVolumes","accept","dismiss","membership","Resource$Series$Membership","associated","Resource$Volumes$Associated","mybooks","Resource$Volumes$Mybooks","recommended","Resource$Volumes$Recommended","useruploaded","Resource$Volumes$Useruploaded","rate"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/books/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.books_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar books_v1;\n(function (books_v1) {\n    /**\n     * Books API\n     *\n     * The Google Books API allows clients to access the Google Books repository.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const books = google.books('v1');\n     * ```\n     */\n    class Books {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.bookshelves = new Resource$Bookshelves(this.context);\n            this.cloudloading = new Resource$Cloudloading(this.context);\n            this.dictionary = new Resource$Dictionary(this.context);\n            this.familysharing = new Resource$Familysharing(this.context);\n            this.layers = new Resource$Layers(this.context);\n            this.myconfig = new Resource$Myconfig(this.context);\n            this.mylibrary = new Resource$Mylibrary(this.context);\n            this.notification = new Resource$Notification(this.context);\n            this.onboarding = new Resource$Onboarding(this.context);\n            this.personalizedstream = new Resource$Personalizedstream(this.context);\n            this.promooffer = new Resource$Promooffer(this.context);\n            this.series = new Resource$Series(this.context);\n            this.volumes = new Resource$Volumes(this.context);\n        }\n    }\n    books_v1.Books = Books;\n    class Resource$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Bookshelves$Volumes(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves = Resource$Bookshelves;\n    class Resource$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n    class Resource$Cloudloading {\n        constructor(context) {\n            this.context = context;\n        }\n        addBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Cloudloading = Resource$Cloudloading;\n    class Resource$Dictionary {\n        constructor(context) {\n            this.context = context;\n        }\n        listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['cpksver'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Dictionary = Resource$Dictionary;\n    class Resource$Familysharing {\n        constructor(context) {\n            this.context = context;\n        }\n        getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        share(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unshare(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Familysharing = Resource$Familysharing;\n    class Resource$Layers {\n        constructor(context) {\n            this.context = context;\n            this.annotationData = new Resource$Layers$Annotationdata(this.context);\n            this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'summaryId'],\n                pathParams: ['summaryId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers = Resource$Layers;\n    class Resource$Layers$Annotationdata {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'volumeId',\n                    'layerId',\n                    'annotationDataId',\n                    'contentVersion',\n                ],\n                pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n    class Resource$Layers$Volumeannotations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'annotationId'],\n                pathParams: ['annotationId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n    class Resource$Myconfig {\n        constructor(context) {\n            this.context = context;\n        }\n        getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'volumeIds'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'nonce', 'source', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['cpksver', 'nonce', 'source'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Myconfig = Resource$Myconfig;\n    class Resource$Mylibrary {\n        constructor(context) {\n            this.context = context;\n            this.annotations = new Resource$Mylibrary$Annotations(this.context);\n            this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n            this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n        }\n    }\n    books_v1.Resource$Mylibrary = Resource$Mylibrary;\n    class Resource$Mylibrary$Annotations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        summary(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['layerIds', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n    class Resource$Mylibrary$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n        }\n        addVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n    class Resource$Mylibrary$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n    class Resource$Mylibrary$Readingpositions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setPosition(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'position', 'timestamp'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n    class Resource$Notification {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['notification_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Notification = Resource$Notification;\n    class Resource$Onboarding {\n        constructor(context) {\n            this.context = context;\n        }\n        listCategories(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Onboarding = Resource$Onboarding;\n    class Resource$Personalizedstream {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n    class Resource$Promooffer {\n        constructor(context) {\n            this.context = context;\n        }\n        accept(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        dismiss(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Promooffer = Resource$Promooffer;\n    class Resource$Series {\n        constructor(context) {\n            this.context = context;\n            this.membership = new Resource$Series$Membership(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series = Resource$Series;\n    class Resource$Series$Membership {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series$Membership = Resource$Series$Membership;\n    class Resource$Volumes {\n        constructor(context) {\n            this.context = context;\n            this.associated = new Resource$Volumes$Associated(this.context);\n            this.mybooks = new Resource$Volumes$Mybooks(this.context);\n            this.recommended = new Resource$Volumes$Recommended(this.context);\n            this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['q'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes = Resource$Volumes;\n    class Resource$Volumes$Associated {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n    class Resource$Volumes$Mybooks {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n    class Resource$Volumes$Recommended {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['rating', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n    class Resource$Volumes$Useruploaded {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://books.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 || (exports.books_v1 = books_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}