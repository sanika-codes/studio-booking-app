{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.youtube_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar youtube_v3;\n(function (youtube_v3) {\n  /**\n   * YouTube Data API v3\n   *\n   * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const youtube = google.youtube('v3');\n   * ```\n   */\n  class Youtube {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.abuseReports = new Resource$Abusereports(this.context);\n      this.activities = new Resource$Activities(this.context);\n      this.captions = new Resource$Captions(this.context);\n      this.channelBanners = new Resource$Channelbanners(this.context);\n      this.channels = new Resource$Channels(this.context);\n      this.channelSections = new Resource$Channelsections(this.context);\n      this.comments = new Resource$Comments(this.context);\n      this.commentThreads = new Resource$Commentthreads(this.context);\n      this.i18nLanguages = new Resource$I18nlanguages(this.context);\n      this.i18nRegions = new Resource$I18nregions(this.context);\n      this.liveBroadcasts = new Resource$Livebroadcasts(this.context);\n      this.liveChatBans = new Resource$Livechatbans(this.context);\n      this.liveChatMessages = new Resource$Livechatmessages(this.context);\n      this.liveChatModerators = new Resource$Livechatmoderators(this.context);\n      this.liveStreams = new Resource$Livestreams(this.context);\n      this.members = new Resource$Members(this.context);\n      this.membershipsLevels = new Resource$Membershipslevels(this.context);\n      this.playlistItems = new Resource$Playlistitems(this.context);\n      this.playlists = new Resource$Playlists(this.context);\n      this.search = new Resource$Search(this.context);\n      this.subscriptions = new Resource$Subscriptions(this.context);\n      this.superChatEvents = new Resource$Superchatevents(this.context);\n      this.tests = new Resource$Tests(this.context);\n      this.thirdPartyLinks = new Resource$Thirdpartylinks(this.context);\n      this.thumbnails = new Resource$Thumbnails(this.context);\n      this.videoAbuseReportReasons = new Resource$Videoabusereportreasons(this.context);\n      this.videoCategories = new Resource$Videocategories(this.context);\n      this.videos = new Resource$Videos(this.context);\n      this.watermarks = new Resource$Watermarks(this.context);\n      this.youtube = new Resource$Youtube(this.context);\n    }\n  }\n  youtube_v3.Youtube = Youtube;\n  class Resource$Abusereports {\n    constructor(context) {\n      this.context = context;\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/abuseReports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Abusereports = Resource$Abusereports;\n  class Resource$Activities {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/activities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Activities = Resource$Activities;\n  class Resource$Captions {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part', 'videoId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Captions = Resource$Captions;\n  class Resource$Channelbanners {\n    constructor(context) {\n      this.context = context;\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Channelbanners = Resource$Channelbanners;\n  class Resource$Channels {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Channels = Resource$Channels;\n  class Resource$Channelsections {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Channelsections = Resource$Channelsections;\n  class Resource$Comments {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    markAsSpam(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments/markAsSpam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setModerationStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments/setModerationStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id', 'moderationStatus'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Comments = Resource$Comments;\n  class Resource$Commentthreads {\n    constructor(context) {\n      this.context = context;\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Commentthreads = Resource$Commentthreads;\n  class Resource$I18nlanguages {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/i18nLanguages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$I18nlanguages = Resource$I18nlanguages;\n  class Resource$I18nregions {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/i18nRegions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$I18nregions = Resource$I18nregions;\n  class Resource$Livebroadcasts {\n    constructor(context) {\n      this.context = context;\n    }\n    bind(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts/bind').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insertCuepoint(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts/cuepoint').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    transition(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts/transition').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['broadcastStatus', 'id', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Livebroadcasts = Resource$Livebroadcasts;\n  class Resource$Livechatbans {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Livechatbans = Resource$Livechatbans;\n  class Resource$Livechatmessages {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['liveChatId', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Livechatmessages = Resource$Livechatmessages;\n  class Resource$Livechatmoderators {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['liveChatId', 'part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Livechatmoderators = Resource$Livechatmoderators;\n  class Resource$Livestreams {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Livestreams = Resource$Livestreams;\n  class Resource$Members {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/members').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Members = Resource$Members;\n  class Resource$Membershipslevels {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/membershipsLevels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Membershipslevels = Resource$Membershipslevels;\n  class Resource$Playlistitems {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Playlistitems = Resource$Playlistitems;\n  class Resource$Playlists {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Playlists = Resource$Playlists;\n  class Resource$Search {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Search = Resource$Search;\n  class Resource$Subscriptions {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Subscriptions = Resource$Subscriptions;\n  class Resource$Superchatevents {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/superChatEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Superchatevents = Resource$Superchatevents;\n  class Resource$Tests {\n    constructor(context) {\n      this.context = context;\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/tests').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Tests = Resource$Tests;\n  class Resource$Thirdpartylinks {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['linkingToken', 'type'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Thirdpartylinks = Resource$Thirdpartylinks;\n  class Resource$Thumbnails {\n    constructor(context) {\n      this.context = context;\n    }\n    set(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['videoId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Thumbnails = Resource$Thumbnails;\n  class Resource$Videoabusereportreasons {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videoAbuseReportReasons').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Videoabusereportreasons = Resource$Videoabusereportreasons;\n  class Resource$Videocategories {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videoCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Videocategories = Resource$Videocategories;\n  class Resource$Videos {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getRating(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos/getRating').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['id', 'rating'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    reportAbuse(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos/reportAbuse').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['part'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Videos = Resource$Videos;\n  class Resource$Watermarks {\n    constructor(context) {\n      this.context = context;\n    }\n    set(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['channelId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    unset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/watermarks/unset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['channelId'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Watermarks = Resource$Watermarks;\n  class Resource$Youtube {\n    constructor(context) {\n      this.context = context;\n      this.v3 = new Resource$Youtube$V3(this.context);\n    }\n  }\n  youtube_v3.Resource$Youtube = Resource$Youtube;\n  class Resource$Youtube$V3 {\n    constructor(context) {\n      this.context = context;\n    }\n    updateCommentThreads(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  youtube_v3.Resource$Youtube$V3 = Resource$Youtube$V3;\n})(youtube_v3 || (exports.youtube_v3 = youtube_v3 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","youtube_v3","googleapis_common_1","require","Youtube","constructor","options","google","context","_options","abuseReports","Resource$Abusereports","activities","Resource$Activities","captions","Resource$Captions","channelBanners","Resource$Channelbanners","channels","Resource$Channels","channelSections","Resource$Channelsections","comments","Resource$Comments","commentThreads","Resource$Commentthreads","i18nLanguages","Resource$I18nlanguages","i18nRegions","Resource$I18nregions","liveBroadcasts","Resource$Livebroadcasts","liveChatBans","Resource$Livechatbans","liveChatMessages","Resource$Livechatmessages","liveChatModerators","Resource$Livechatmoderators","liveStreams","Resource$Livestreams","members","Resource$Members","membershipsLevels","Resource$Membershipslevels","playlistItems","Resource$Playlistitems","playlists","Resource$Playlists","search","Resource$Search","subscriptions","Resource$Subscriptions","superChatEvents","Resource$Superchatevents","tests","Resource$Tests","thirdPartyLinks","Resource$Thirdpartylinks","thumbnails","Resource$Thumbnails","videoAbuseReportReasons","Resource$Videoabusereportreasons","videoCategories","Resource$Videocategories","videos","Resource$Videos","watermarks","Resource$Watermarks","youtube","Resource$Youtube","insert","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","delete","download","mediaUrl","update","markAsSpam","setModerationStatus","bind","insertCuepoint","transition","set","getRating","rate","reportAbuse","unset","v3","Resource$Youtube$V3","updateCommentThreads"],"sources":["D:/Amber Horizons/Clients/Vibini Creates/node_modules/googleapis/build/src/apis/youtube/v3.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.youtube_v3 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar youtube_v3;\n(function (youtube_v3) {\n    /**\n     * YouTube Data API v3\n     *\n     * The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const youtube = google.youtube('v3');\n     * ```\n     */\n    class Youtube {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.abuseReports = new Resource$Abusereports(this.context);\n            this.activities = new Resource$Activities(this.context);\n            this.captions = new Resource$Captions(this.context);\n            this.channelBanners = new Resource$Channelbanners(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.channelSections = new Resource$Channelsections(this.context);\n            this.comments = new Resource$Comments(this.context);\n            this.commentThreads = new Resource$Commentthreads(this.context);\n            this.i18nLanguages = new Resource$I18nlanguages(this.context);\n            this.i18nRegions = new Resource$I18nregions(this.context);\n            this.liveBroadcasts = new Resource$Livebroadcasts(this.context);\n            this.liveChatBans = new Resource$Livechatbans(this.context);\n            this.liveChatMessages = new Resource$Livechatmessages(this.context);\n            this.liveChatModerators = new Resource$Livechatmoderators(this.context);\n            this.liveStreams = new Resource$Livestreams(this.context);\n            this.members = new Resource$Members(this.context);\n            this.membershipsLevels = new Resource$Membershipslevels(this.context);\n            this.playlistItems = new Resource$Playlistitems(this.context);\n            this.playlists = new Resource$Playlists(this.context);\n            this.search = new Resource$Search(this.context);\n            this.subscriptions = new Resource$Subscriptions(this.context);\n            this.superChatEvents = new Resource$Superchatevents(this.context);\n            this.tests = new Resource$Tests(this.context);\n            this.thirdPartyLinks = new Resource$Thirdpartylinks(this.context);\n            this.thumbnails = new Resource$Thumbnails(this.context);\n            this.videoAbuseReportReasons = new Resource$Videoabusereportreasons(this.context);\n            this.videoCategories = new Resource$Videocategories(this.context);\n            this.videos = new Resource$Videos(this.context);\n            this.watermarks = new Resource$Watermarks(this.context);\n            this.youtube = new Resource$Youtube(this.context);\n        }\n    }\n    youtube_v3.Youtube = Youtube;\n    class Resource$Abusereports {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/abuseReports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Abusereports = Resource$Abusereports;\n    class Resource$Activities {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/activities').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Activities = Resource$Activities;\n    class Resource$Captions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part', 'videoId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/captions').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Captions = Resource$Captions;\n    class Resource$Channelbanners {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/channelBanners/insert').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Channelbanners = Resource$Channelbanners;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Channels = Resource$Channels;\n    class Resource$Channelsections {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/channelSections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Channelsections = Resource$Channelsections;\n    class Resource$Comments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        markAsSpam(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments/markAsSpam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setModerationStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments/setModerationStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id', 'moderationStatus'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/comments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Comments = Resource$Comments;\n    class Resource$Commentthreads {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Commentthreads = Resource$Commentthreads;\n    class Resource$I18nlanguages {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/i18nLanguages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$I18nlanguages = Resource$I18nlanguages;\n    class Resource$I18nregions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/i18nRegions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$I18nregions = Resource$I18nregions;\n    class Resource$Livebroadcasts {\n        constructor(context) {\n            this.context = context;\n        }\n        bind(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts/bind').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insertCuepoint(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts/cuepoint').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        transition(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts/transition').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['broadcastStatus', 'id', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveBroadcasts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livebroadcasts = Resource$Livebroadcasts;\n    class Resource$Livechatbans {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/bans').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livechatbans = Resource$Livechatbans;\n    class Resource$Livechatmessages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/messages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['liveChatId', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livechatmessages = Resource$Livechatmessages;\n    class Resource$Livechatmoderators {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveChat/moderators').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['liveChatId', 'part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livechatmoderators = Resource$Livechatmoderators;\n    class Resource$Livestreams {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/liveStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Livestreams = Resource$Livestreams;\n    class Resource$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/members').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Members = Resource$Members;\n    class Resource$Membershipslevels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/membershipsLevels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Membershipslevels = Resource$Membershipslevels;\n    class Resource$Playlistitems {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlistItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Playlistitems = Resource$Playlistitems;\n    class Resource$Playlists {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/playlists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Playlists = Resource$Playlists;\n    class Resource$Search {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Search = Resource$Search;\n    class Resource$Subscriptions {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/subscriptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Subscriptions = Resource$Subscriptions;\n    class Resource$Superchatevents {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/superChatEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Superchatevents = Resource$Superchatevents;\n    class Resource$Tests {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/tests').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Tests = Resource$Tests;\n    class Resource$Thirdpartylinks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['linkingToken', 'type'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thirdPartyLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Thirdpartylinks = Resource$Thirdpartylinks;\n    class Resource$Thumbnails {\n        constructor(context) {\n            this.context = context;\n        }\n        set(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/thumbnails/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['videoId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Thumbnails = Resource$Thumbnails;\n    class Resource$Videoabusereportreasons {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videoAbuseReportReasons').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Videoabusereportreasons = Resource$Videoabusereportreasons;\n    class Resource$Videocategories {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videoCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Videocategories = Resource$Videocategories;\n    class Resource$Videos {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getRating(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos/getRating').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['id', 'rating'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reportAbuse(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos/reportAbuse').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/videos').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['part'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Videos = Resource$Videos;\n    class Resource$Watermarks {\n        constructor(context) {\n            this.context = context;\n        }\n        set(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/youtube/v3/watermarks/set').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['channelId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        unset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/watermarks/unset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['channelId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Watermarks = Resource$Watermarks;\n    class Resource$Youtube {\n        constructor(context) {\n            this.context = context;\n            this.v3 = new Resource$Youtube$V3(this.context);\n        }\n    }\n    youtube_v3.Resource$Youtube = Resource$Youtube;\n    class Resource$Youtube$V3 {\n        constructor(context) {\n            this.context = context;\n        }\n        updateCommentThreads(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://youtube.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/youtube/v3/commentThreads').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    youtube_v3.Resource$Youtube$V3 = Resource$Youtube$V3;\n})(youtube_v3 || (exports.youtube_v3 = youtube_v3 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}